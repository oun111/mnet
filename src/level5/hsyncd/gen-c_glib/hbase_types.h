/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef HBASE_TYPES_H
#define HBASE_TYPES_H

/* base includes */
#include <glib-object.h>
#include <thrift/c_glib/thrift_struct.h>
#include <thrift/c_glib/protocol/thrift_protocol.h>
/* custom thrift includes */

/* begin types */

enum _TDeleteType {
  T_DELETE_TYPE_DELETE_COLUMN = 0,
  T_DELETE_TYPE_DELETE_COLUMNS = 1
};
typedef enum _TDeleteType TDeleteType;

/* return the name of the constant */
const char *
toString_TDeleteType(int value); 

enum _TDurability {
  T_DURABILITY_SKIP_WAL = 1,
  T_DURABILITY_ASYNC_WAL = 2,
  T_DURABILITY_SYNC_WAL = 3,
  T_DURABILITY_FSYNC_WAL = 4
};
typedef enum _TDurability TDurability;

/* return the name of the constant */
const char *
toString_TDurability(int value); 

enum _TCompareOp {
  T_COMPARE_OP_LESS = 0,
  T_COMPARE_OP_LESS_OR_EQUAL = 1,
  T_COMPARE_OP_EQUAL = 2,
  T_COMPARE_OP_NOT_EQUAL = 3,
  T_COMPARE_OP_GREATER_OR_EQUAL = 4,
  T_COMPARE_OP_GREATER = 5,
  T_COMPARE_OP_NO_OP = 6
};
typedef enum _TCompareOp TCompareOp;

/* return the name of the constant */
const char *
toString_TCompareOp(int value); 

/* struct TTimeRange */
struct _TTimeRange
{ 
  ThriftStruct parent; 

  /* public */
  gint64 minStamp;
  gint64 maxStamp;
};
typedef struct _TTimeRange TTimeRange;

struct _TTimeRangeClass
{
  ThriftStructClass parent;
};
typedef struct _TTimeRangeClass TTimeRangeClass;

GType t_time_range_get_type (void);
#define TYPE_T_TIME_RANGE (t_time_range_get_type())
#define T_TIME_RANGE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_TIME_RANGE, TTimeRange))
#define T_TIME_RANGE_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_TIME_RANGE, TTimeRangeClass))
#define IS_T_TIME_RANGE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_TIME_RANGE))
#define IS_T_TIME_RANGE_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_TIME_RANGE))
#define T_TIME_RANGE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_TIME_RANGE, TTimeRangeClass))

/* struct TColumn */
struct _TColumn
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * family;
  GByteArray * qualifier;
  gboolean __isset_qualifier;
  gint64 timestamp;
  gboolean __isset_timestamp;
};
typedef struct _TColumn TColumn;

struct _TColumnClass
{
  ThriftStructClass parent;
};
typedef struct _TColumnClass TColumnClass;

GType t_column_get_type (void);
#define TYPE_T_COLUMN (t_column_get_type())
#define T_COLUMN(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_COLUMN, TColumn))
#define T_COLUMN_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_COLUMN, TColumnClass))
#define IS_T_COLUMN(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_COLUMN))
#define IS_T_COLUMN_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_COLUMN))
#define T_COLUMN_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_COLUMN, TColumnClass))

/* struct TColumnValue */
struct _TColumnValue
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * family;
  GByteArray * qualifier;
  GByteArray * value;
  gint64 timestamp;
  gboolean __isset_timestamp;
  GByteArray * tags;
  gboolean __isset_tags;
};
typedef struct _TColumnValue TColumnValue;

struct _TColumnValueClass
{
  ThriftStructClass parent;
};
typedef struct _TColumnValueClass TColumnValueClass;

GType t_column_value_get_type (void);
#define TYPE_T_COLUMN_VALUE (t_column_value_get_type())
#define T_COLUMN_VALUE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_COLUMN_VALUE, TColumnValue))
#define T_COLUMN_VALUE_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_COLUMN_VALUE, TColumnValueClass))
#define IS_T_COLUMN_VALUE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_COLUMN_VALUE))
#define IS_T_COLUMN_VALUE_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_COLUMN_VALUE))
#define T_COLUMN_VALUE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_COLUMN_VALUE, TColumnValueClass))

/* struct TColumnIncrement */
struct _TColumnIncrement
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * family;
  GByteArray * qualifier;
  gint64 amount;
  gboolean __isset_amount;
};
typedef struct _TColumnIncrement TColumnIncrement;

struct _TColumnIncrementClass
{
  ThriftStructClass parent;
};
typedef struct _TColumnIncrementClass TColumnIncrementClass;

GType t_column_increment_get_type (void);
#define TYPE_T_COLUMN_INCREMENT (t_column_increment_get_type())
#define T_COLUMN_INCREMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_COLUMN_INCREMENT, TColumnIncrement))
#define T_COLUMN_INCREMENT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_COLUMN_INCREMENT, TColumnIncrementClass))
#define IS_T_COLUMN_INCREMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_COLUMN_INCREMENT))
#define IS_T_COLUMN_INCREMENT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_COLUMN_INCREMENT))
#define T_COLUMN_INCREMENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_COLUMN_INCREMENT, TColumnIncrementClass))

/* struct TResult */
struct _TResult
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * row;
  gboolean __isset_row;
  GPtrArray * columnValues;
};
typedef struct _TResult TResult;

struct _TResultClass
{
  ThriftStructClass parent;
};
typedef struct _TResultClass TResultClass;

GType t_result_get_type (void);
#define TYPE_T_RESULT (t_result_get_type())
#define T_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_RESULT, TResult))
#define T_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_RESULT, TResultClass))
#define IS_T_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_RESULT))
#define IS_T_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_RESULT))
#define T_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_RESULT, TResultClass))

/* struct TAuthorization */
struct _TAuthorization
{ 
  ThriftStruct parent; 

  /* public */
  GPtrArray * labels;
  gboolean __isset_labels;
};
typedef struct _TAuthorization TAuthorization;

struct _TAuthorizationClass
{
  ThriftStructClass parent;
};
typedef struct _TAuthorizationClass TAuthorizationClass;

GType t_authorization_get_type (void);
#define TYPE_T_AUTHORIZATION (t_authorization_get_type())
#define T_AUTHORIZATION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_AUTHORIZATION, TAuthorization))
#define T_AUTHORIZATION_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_AUTHORIZATION, TAuthorizationClass))
#define IS_T_AUTHORIZATION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_AUTHORIZATION))
#define IS_T_AUTHORIZATION_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_AUTHORIZATION))
#define T_AUTHORIZATION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_AUTHORIZATION, TAuthorizationClass))

/* struct TCellVisibility */
struct _TCellVisibility
{ 
  ThriftStruct parent; 

  /* public */
  gchar * expression;
  gboolean __isset_expression;
};
typedef struct _TCellVisibility TCellVisibility;

struct _TCellVisibilityClass
{
  ThriftStructClass parent;
};
typedef struct _TCellVisibilityClass TCellVisibilityClass;

GType t_cell_visibility_get_type (void);
#define TYPE_T_CELL_VISIBILITY (t_cell_visibility_get_type())
#define T_CELL_VISIBILITY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_CELL_VISIBILITY, TCellVisibility))
#define T_CELL_VISIBILITY_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_CELL_VISIBILITY, TCellVisibilityClass))
#define IS_T_CELL_VISIBILITY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_CELL_VISIBILITY))
#define IS_T_CELL_VISIBILITY_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_CELL_VISIBILITY))
#define T_CELL_VISIBILITY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_CELL_VISIBILITY, TCellVisibilityClass))

/* struct TGet */
struct _TGet
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * row;
  GPtrArray * columns;
  gboolean __isset_columns;
  gint64 timestamp;
  gboolean __isset_timestamp;
  TTimeRange * timeRange;
  gboolean __isset_timeRange;
  gint32 maxVersions;
  gboolean __isset_maxVersions;
  GByteArray * filterString;
  gboolean __isset_filterString;
  GHashTable * attributes;
  gboolean __isset_attributes;
  TAuthorization * authorizations;
  gboolean __isset_authorizations;
};
typedef struct _TGet TGet;

struct _TGetClass
{
  ThriftStructClass parent;
};
typedef struct _TGetClass TGetClass;

GType t_get_get_type (void);
#define TYPE_T_GET (t_get_get_type())
#define T_GET(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_GET, TGet))
#define T_GET_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_GET, TGetClass))
#define IS_T_GET(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_GET))
#define IS_T_GET_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_GET))
#define T_GET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_GET, TGetClass))

/* struct TPut */
struct _TPut
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * row;
  GPtrArray * columnValues;
  gint64 timestamp;
  gboolean __isset_timestamp;
  GHashTable * attributes;
  gboolean __isset_attributes;
  TDurability durability;
  gboolean __isset_durability;
  TCellVisibility * cellVisibility;
  gboolean __isset_cellVisibility;
};
typedef struct _TPut TPut;

struct _TPutClass
{
  ThriftStructClass parent;
};
typedef struct _TPutClass TPutClass;

GType t_put_get_type (void);
#define TYPE_T_PUT (t_put_get_type())
#define T_PUT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_PUT, TPut))
#define T_PUT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_PUT, TPutClass))
#define IS_T_PUT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_PUT))
#define IS_T_PUT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_PUT))
#define T_PUT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_PUT, TPutClass))

/* struct TDelete */
struct _TDelete
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * row;
  GPtrArray * columns;
  gboolean __isset_columns;
  gint64 timestamp;
  gboolean __isset_timestamp;
  TDeleteType deleteType;
  gboolean __isset_deleteType;
  GHashTable * attributes;
  gboolean __isset_attributes;
  TDurability durability;
  gboolean __isset_durability;
};
typedef struct _TDelete TDelete;

struct _TDeleteClass
{
  ThriftStructClass parent;
};
typedef struct _TDeleteClass TDeleteClass;

GType t_delete_get_type (void);
#define TYPE_T_DELETE (t_delete_get_type())
#define T_DELETE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_DELETE, TDelete))
#define T_DELETE_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_DELETE, TDeleteClass))
#define IS_T_DELETE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_DELETE))
#define IS_T_DELETE_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_DELETE))
#define T_DELETE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_DELETE, TDeleteClass))

/* struct TIncrement */
struct _TIncrement
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * row;
  GPtrArray * columns;
  GHashTable * attributes;
  gboolean __isset_attributes;
  TDurability durability;
  gboolean __isset_durability;
  TCellVisibility * cellVisibility;
  gboolean __isset_cellVisibility;
};
typedef struct _TIncrement TIncrement;

struct _TIncrementClass
{
  ThriftStructClass parent;
};
typedef struct _TIncrementClass TIncrementClass;

GType t_increment_get_type (void);
#define TYPE_T_INCREMENT (t_increment_get_type())
#define T_INCREMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_INCREMENT, TIncrement))
#define T_INCREMENT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_INCREMENT, TIncrementClass))
#define IS_T_INCREMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_INCREMENT))
#define IS_T_INCREMENT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_INCREMENT))
#define T_INCREMENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_INCREMENT, TIncrementClass))

/* struct TAppend */
struct _TAppend
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * row;
  GPtrArray * columns;
  GHashTable * attributes;
  gboolean __isset_attributes;
  TDurability durability;
  gboolean __isset_durability;
  TCellVisibility * cellVisibility;
  gboolean __isset_cellVisibility;
};
typedef struct _TAppend TAppend;

struct _TAppendClass
{
  ThriftStructClass parent;
};
typedef struct _TAppendClass TAppendClass;

GType t_append_get_type (void);
#define TYPE_T_APPEND (t_append_get_type())
#define T_APPEND(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_APPEND, TAppend))
#define T_APPEND_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_APPEND, TAppendClass))
#define IS_T_APPEND(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_APPEND))
#define IS_T_APPEND_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_APPEND))
#define T_APPEND_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_APPEND, TAppendClass))

/* struct TScan */
struct _TScan
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * startRow;
  gboolean __isset_startRow;
  GByteArray * stopRow;
  gboolean __isset_stopRow;
  GPtrArray * columns;
  gboolean __isset_columns;
  gint32 caching;
  gboolean __isset_caching;
  gint32 maxVersions;
  gboolean __isset_maxVersions;
  TTimeRange * timeRange;
  gboolean __isset_timeRange;
  GByteArray * filterString;
  gboolean __isset_filterString;
  gint32 batchSize;
  gboolean __isset_batchSize;
  GHashTable * attributes;
  gboolean __isset_attributes;
  TAuthorization * authorizations;
  gboolean __isset_authorizations;
  gboolean reversed;
  gboolean __isset_reversed;
  gboolean cacheBlocks;
  gboolean __isset_cacheBlocks;
  GHashTable * colFamTimeRangeMap;
  gboolean __isset_colFamTimeRangeMap;
  gboolean small;
  gboolean __isset_small;
};
typedef struct _TScan TScan;

struct _TScanClass
{
  ThriftStructClass parent;
};
typedef struct _TScanClass TScanClass;

GType t_scan_get_type (void);
#define TYPE_T_SCAN (t_scan_get_type())
#define T_SCAN(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_SCAN, TScan))
#define T_SCAN_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_SCAN, TScanClass))
#define IS_T_SCAN(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_SCAN))
#define IS_T_SCAN_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_SCAN))
#define T_SCAN_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_SCAN, TScanClass))

/* struct TMutation */
struct _TMutation
{ 
  ThriftStruct parent; 

  /* public */
  TPut * put;
  gboolean __isset_put;
  TDelete * deleteSingle;
  gboolean __isset_deleteSingle;
};
typedef struct _TMutation TMutation;

struct _TMutationClass
{
  ThriftStructClass parent;
};
typedef struct _TMutationClass TMutationClass;

GType t_mutation_get_type (void);
#define TYPE_T_MUTATION (t_mutation_get_type())
#define T_MUTATION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_MUTATION, TMutation))
#define T_MUTATION_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_MUTATION, TMutationClass))
#define IS_T_MUTATION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_MUTATION))
#define IS_T_MUTATION_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_MUTATION))
#define T_MUTATION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_MUTATION, TMutationClass))

/* struct TRowMutations */
struct _TRowMutations
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * row;
  GPtrArray * mutations;
};
typedef struct _TRowMutations TRowMutations;

struct _TRowMutationsClass
{
  ThriftStructClass parent;
};
typedef struct _TRowMutationsClass TRowMutationsClass;

GType t_row_mutations_get_type (void);
#define TYPE_T_ROW_MUTATIONS (t_row_mutations_get_type())
#define T_ROW_MUTATIONS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_ROW_MUTATIONS, TRowMutations))
#define T_ROW_MUTATIONS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_ROW_MUTATIONS, TRowMutationsClass))
#define IS_T_ROW_MUTATIONS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_ROW_MUTATIONS))
#define IS_T_ROW_MUTATIONS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_ROW_MUTATIONS))
#define T_ROW_MUTATIONS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_ROW_MUTATIONS, TRowMutationsClass))

/* struct THRegionInfo */
struct _THRegionInfo
{ 
  ThriftStruct parent; 

  /* public */
  gint64 regionId;
  GByteArray * tableName;
  GByteArray * startKey;
  gboolean __isset_startKey;
  GByteArray * endKey;
  gboolean __isset_endKey;
  gboolean offline;
  gboolean __isset_offline;
  gboolean split;
  gboolean __isset_split;
  gint32 replicaId;
  gboolean __isset_replicaId;
};
typedef struct _THRegionInfo THRegionInfo;

struct _THRegionInfoClass
{
  ThriftStructClass parent;
};
typedef struct _THRegionInfoClass THRegionInfoClass;

GType t_h_region_info_get_type (void);
#define TYPE_T_H_REGION_INFO (t_h_region_info_get_type())
#define T_H_REGION_INFO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_H_REGION_INFO, THRegionInfo))
#define T_H_REGION_INFO_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_H_REGION_INFO, THRegionInfoClass))
#define IS_T_H_REGION_INFO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_H_REGION_INFO))
#define IS_T_H_REGION_INFO_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_H_REGION_INFO))
#define T_H_REGION_INFO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_H_REGION_INFO, THRegionInfoClass))

/* struct TServerName */
struct _TServerName
{ 
  ThriftStruct parent; 

  /* public */
  gchar * hostName;
  gint32 port;
  gboolean __isset_port;
  gint64 startCode;
  gboolean __isset_startCode;
};
typedef struct _TServerName TServerName;

struct _TServerNameClass
{
  ThriftStructClass parent;
};
typedef struct _TServerNameClass TServerNameClass;

GType t_server_name_get_type (void);
#define TYPE_T_SERVER_NAME (t_server_name_get_type())
#define T_SERVER_NAME(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_SERVER_NAME, TServerName))
#define T_SERVER_NAME_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_SERVER_NAME, TServerNameClass))
#define IS_T_SERVER_NAME(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_SERVER_NAME))
#define IS_T_SERVER_NAME_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_SERVER_NAME))
#define T_SERVER_NAME_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_SERVER_NAME, TServerNameClass))

/* struct THRegionLocation */
struct _THRegionLocation
{ 
  ThriftStruct parent; 

  /* public */
  TServerName * serverName;
  THRegionInfo * regionInfo;
};
typedef struct _THRegionLocation THRegionLocation;

struct _THRegionLocationClass
{
  ThriftStructClass parent;
};
typedef struct _THRegionLocationClass THRegionLocationClass;

GType t_h_region_location_get_type (void);
#define TYPE_T_H_REGION_LOCATION (t_h_region_location_get_type())
#define T_H_REGION_LOCATION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_H_REGION_LOCATION, THRegionLocation))
#define T_H_REGION_LOCATION_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_H_REGION_LOCATION, THRegionLocationClass))
#define IS_T_H_REGION_LOCATION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_H_REGION_LOCATION))
#define IS_T_H_REGION_LOCATION_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_H_REGION_LOCATION))
#define T_H_REGION_LOCATION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_H_REGION_LOCATION, THRegionLocationClass))

struct _TIOError
{ 
  ThriftStruct parent; 

  /* public */
  gchar * message;
  gboolean __isset_message;
};
typedef struct _TIOError TIOError;

struct _TIOErrorClass
{
  ThriftStructClass parent;
};
typedef struct _TIOErrorClass TIOErrorClass;

GType t_i_o_error_get_type (void);
#define TYPE_T_I_O_ERROR (t_i_o_error_get_type())
#define T_I_O_ERROR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_I_O_ERROR, TIOError))
#define T_I_O_ERROR_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_I_O_ERROR, TIOErrorClass))
#define IS_T_I_O_ERROR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_I_O_ERROR))
#define IS_T_I_O_ERROR_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_I_O_ERROR))
#define T_I_O_ERROR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_I_O_ERROR, TIOErrorClass))

/* exception */
typedef enum
{
  T_I_O_ERROR_ERROR_CODE
} TIOErrorError;

GQuark t_i_o_error_error_quark (void);
#define T_I_O_ERROR_ERROR (t_i_o_error_error_quark())


struct _TIllegalArgument
{ 
  ThriftStruct parent; 

  /* public */
  gchar * message;
  gboolean __isset_message;
};
typedef struct _TIllegalArgument TIllegalArgument;

struct _TIllegalArgumentClass
{
  ThriftStructClass parent;
};
typedef struct _TIllegalArgumentClass TIllegalArgumentClass;

GType t_illegal_argument_get_type (void);
#define TYPE_T_ILLEGAL_ARGUMENT (t_illegal_argument_get_type())
#define T_ILLEGAL_ARGUMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_ILLEGAL_ARGUMENT, TIllegalArgument))
#define T_ILLEGAL_ARGUMENT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_ILLEGAL_ARGUMENT, TIllegalArgumentClass))
#define IS_T_ILLEGAL_ARGUMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_ILLEGAL_ARGUMENT))
#define IS_T_ILLEGAL_ARGUMENT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_ILLEGAL_ARGUMENT))
#define T_ILLEGAL_ARGUMENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_ILLEGAL_ARGUMENT, TIllegalArgumentClass))

/* exception */
typedef enum
{
  T_ILLEGAL_ARGUMENT_ERROR_CODE
} TIllegalArgumentError;

GQuark t_illegal_argument_error_quark (void);
#define T_ILLEGAL_ARGUMENT_ERROR (t_illegal_argument_error_quark())


/* constants */

/* struct THBaseServiceExistsArgs */
struct _THBaseServiceExistsArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * table;
  TGet * tget;
};
typedef struct _THBaseServiceExistsArgs THBaseServiceExistsArgs;

struct _THBaseServiceExistsArgsClass
{
  ThriftStructClass parent;
};
typedef struct _THBaseServiceExistsArgsClass THBaseServiceExistsArgsClass;

GType t_h_base_service_exists_args_get_type (void);
#define TYPE_T_H_BASE_SERVICE_EXISTS_ARGS (t_h_base_service_exists_args_get_type())
#define T_H_BASE_SERVICE_EXISTS_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_H_BASE_SERVICE_EXISTS_ARGS, THBaseServiceExistsArgs))
#define T_H_BASE_SERVICE_EXISTS_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_H_BASE_SERVICE_EXISTS_ARGS, THBaseServiceExistsArgsClass))
#define IS_T_H_BASE_SERVICE_EXISTS_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_H_BASE_SERVICE_EXISTS_ARGS))
#define IS_T_H_BASE_SERVICE_EXISTS_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_H_BASE_SERVICE_EXISTS_ARGS))
#define T_H_BASE_SERVICE_EXISTS_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_H_BASE_SERVICE_EXISTS_ARGS, THBaseServiceExistsArgsClass))

/* struct THBaseServiceExistsResult */
struct _THBaseServiceExistsResult
{ 
  ThriftStruct parent; 

  /* public */
  gboolean success;
  gboolean __isset_success;
  TIOError * io;
  gboolean __isset_io;
};
typedef struct _THBaseServiceExistsResult THBaseServiceExistsResult;

struct _THBaseServiceExistsResultClass
{
  ThriftStructClass parent;
};
typedef struct _THBaseServiceExistsResultClass THBaseServiceExistsResultClass;

GType t_h_base_service_exists_result_get_type (void);
#define TYPE_T_H_BASE_SERVICE_EXISTS_RESULT (t_h_base_service_exists_result_get_type())
#define T_H_BASE_SERVICE_EXISTS_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_H_BASE_SERVICE_EXISTS_RESULT, THBaseServiceExistsResult))
#define T_H_BASE_SERVICE_EXISTS_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_H_BASE_SERVICE_EXISTS_RESULT, THBaseServiceExistsResultClass))
#define IS_T_H_BASE_SERVICE_EXISTS_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_H_BASE_SERVICE_EXISTS_RESULT))
#define IS_T_H_BASE_SERVICE_EXISTS_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_H_BASE_SERVICE_EXISTS_RESULT))
#define T_H_BASE_SERVICE_EXISTS_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_H_BASE_SERVICE_EXISTS_RESULT, THBaseServiceExistsResultClass))

/* struct THBaseServiceExistsAllArgs */
struct _THBaseServiceExistsAllArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * table;
  GPtrArray * tgets;
};
typedef struct _THBaseServiceExistsAllArgs THBaseServiceExistsAllArgs;

struct _THBaseServiceExistsAllArgsClass
{
  ThriftStructClass parent;
};
typedef struct _THBaseServiceExistsAllArgsClass THBaseServiceExistsAllArgsClass;

GType t_h_base_service_exists_all_args_get_type (void);
#define TYPE_T_H_BASE_SERVICE_EXISTS_ALL_ARGS (t_h_base_service_exists_all_args_get_type())
#define T_H_BASE_SERVICE_EXISTS_ALL_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_H_BASE_SERVICE_EXISTS_ALL_ARGS, THBaseServiceExistsAllArgs))
#define T_H_BASE_SERVICE_EXISTS_ALL_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_H_BASE_SERVICE_EXISTS_ALL_ARGS, THBaseServiceExistsAllArgsClass))
#define IS_T_H_BASE_SERVICE_EXISTS_ALL_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_H_BASE_SERVICE_EXISTS_ALL_ARGS))
#define IS_T_H_BASE_SERVICE_EXISTS_ALL_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_H_BASE_SERVICE_EXISTS_ALL_ARGS))
#define T_H_BASE_SERVICE_EXISTS_ALL_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_H_BASE_SERVICE_EXISTS_ALL_ARGS, THBaseServiceExistsAllArgsClass))

/* struct THBaseServiceExistsAllResult */
struct _THBaseServiceExistsAllResult
{ 
  ThriftStruct parent; 

  /* public */
  GArray * success;
  gboolean __isset_success;
  TIOError * io;
  gboolean __isset_io;
};
typedef struct _THBaseServiceExistsAllResult THBaseServiceExistsAllResult;

struct _THBaseServiceExistsAllResultClass
{
  ThriftStructClass parent;
};
typedef struct _THBaseServiceExistsAllResultClass THBaseServiceExistsAllResultClass;

GType t_h_base_service_exists_all_result_get_type (void);
#define TYPE_T_H_BASE_SERVICE_EXISTS_ALL_RESULT (t_h_base_service_exists_all_result_get_type())
#define T_H_BASE_SERVICE_EXISTS_ALL_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_H_BASE_SERVICE_EXISTS_ALL_RESULT, THBaseServiceExistsAllResult))
#define T_H_BASE_SERVICE_EXISTS_ALL_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_H_BASE_SERVICE_EXISTS_ALL_RESULT, THBaseServiceExistsAllResultClass))
#define IS_T_H_BASE_SERVICE_EXISTS_ALL_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_H_BASE_SERVICE_EXISTS_ALL_RESULT))
#define IS_T_H_BASE_SERVICE_EXISTS_ALL_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_H_BASE_SERVICE_EXISTS_ALL_RESULT))
#define T_H_BASE_SERVICE_EXISTS_ALL_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_H_BASE_SERVICE_EXISTS_ALL_RESULT, THBaseServiceExistsAllResultClass))

/* struct THBaseServiceGetArgs */
struct _THBaseServiceGetArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * table;
  TGet * tget;
};
typedef struct _THBaseServiceGetArgs THBaseServiceGetArgs;

struct _THBaseServiceGetArgsClass
{
  ThriftStructClass parent;
};
typedef struct _THBaseServiceGetArgsClass THBaseServiceGetArgsClass;

GType t_h_base_service_get_args_get_type (void);
#define TYPE_T_H_BASE_SERVICE_GET_ARGS (t_h_base_service_get_args_get_type())
#define T_H_BASE_SERVICE_GET_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_H_BASE_SERVICE_GET_ARGS, THBaseServiceGetArgs))
#define T_H_BASE_SERVICE_GET_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_H_BASE_SERVICE_GET_ARGS, THBaseServiceGetArgsClass))
#define IS_T_H_BASE_SERVICE_GET_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_H_BASE_SERVICE_GET_ARGS))
#define IS_T_H_BASE_SERVICE_GET_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_H_BASE_SERVICE_GET_ARGS))
#define T_H_BASE_SERVICE_GET_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_H_BASE_SERVICE_GET_ARGS, THBaseServiceGetArgsClass))

/* struct THBaseServiceGetResult */
struct _THBaseServiceGetResult
{ 
  ThriftStruct parent; 

  /* public */
  TResult * success;
  gboolean __isset_success;
  TIOError * io;
  gboolean __isset_io;
};
typedef struct _THBaseServiceGetResult THBaseServiceGetResult;

struct _THBaseServiceGetResultClass
{
  ThriftStructClass parent;
};
typedef struct _THBaseServiceGetResultClass THBaseServiceGetResultClass;

GType t_h_base_service_get_result_get_type (void);
#define TYPE_T_H_BASE_SERVICE_GET_RESULT (t_h_base_service_get_result_get_type())
#define T_H_BASE_SERVICE_GET_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_H_BASE_SERVICE_GET_RESULT, THBaseServiceGetResult))
#define T_H_BASE_SERVICE_GET_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_H_BASE_SERVICE_GET_RESULT, THBaseServiceGetResultClass))
#define IS_T_H_BASE_SERVICE_GET_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_H_BASE_SERVICE_GET_RESULT))
#define IS_T_H_BASE_SERVICE_GET_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_H_BASE_SERVICE_GET_RESULT))
#define T_H_BASE_SERVICE_GET_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_H_BASE_SERVICE_GET_RESULT, THBaseServiceGetResultClass))

/* struct THBaseServiceGetMultipleArgs */
struct _THBaseServiceGetMultipleArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * table;
  GPtrArray * tgets;
};
typedef struct _THBaseServiceGetMultipleArgs THBaseServiceGetMultipleArgs;

struct _THBaseServiceGetMultipleArgsClass
{
  ThriftStructClass parent;
};
typedef struct _THBaseServiceGetMultipleArgsClass THBaseServiceGetMultipleArgsClass;

GType t_h_base_service_get_multiple_args_get_type (void);
#define TYPE_T_H_BASE_SERVICE_GET_MULTIPLE_ARGS (t_h_base_service_get_multiple_args_get_type())
#define T_H_BASE_SERVICE_GET_MULTIPLE_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_H_BASE_SERVICE_GET_MULTIPLE_ARGS, THBaseServiceGetMultipleArgs))
#define T_H_BASE_SERVICE_GET_MULTIPLE_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_H_BASE_SERVICE_GET_MULTIPLE_ARGS, THBaseServiceGetMultipleArgsClass))
#define IS_T_H_BASE_SERVICE_GET_MULTIPLE_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_H_BASE_SERVICE_GET_MULTIPLE_ARGS))
#define IS_T_H_BASE_SERVICE_GET_MULTIPLE_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_H_BASE_SERVICE_GET_MULTIPLE_ARGS))
#define T_H_BASE_SERVICE_GET_MULTIPLE_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_H_BASE_SERVICE_GET_MULTIPLE_ARGS, THBaseServiceGetMultipleArgsClass))

/* struct THBaseServiceGetMultipleResult */
struct _THBaseServiceGetMultipleResult
{ 
  ThriftStruct parent; 

  /* public */
  GPtrArray * success;
  gboolean __isset_success;
  TIOError * io;
  gboolean __isset_io;
};
typedef struct _THBaseServiceGetMultipleResult THBaseServiceGetMultipleResult;

struct _THBaseServiceGetMultipleResultClass
{
  ThriftStructClass parent;
};
typedef struct _THBaseServiceGetMultipleResultClass THBaseServiceGetMultipleResultClass;

GType t_h_base_service_get_multiple_result_get_type (void);
#define TYPE_T_H_BASE_SERVICE_GET_MULTIPLE_RESULT (t_h_base_service_get_multiple_result_get_type())
#define T_H_BASE_SERVICE_GET_MULTIPLE_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_H_BASE_SERVICE_GET_MULTIPLE_RESULT, THBaseServiceGetMultipleResult))
#define T_H_BASE_SERVICE_GET_MULTIPLE_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_H_BASE_SERVICE_GET_MULTIPLE_RESULT, THBaseServiceGetMultipleResultClass))
#define IS_T_H_BASE_SERVICE_GET_MULTIPLE_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_H_BASE_SERVICE_GET_MULTIPLE_RESULT))
#define IS_T_H_BASE_SERVICE_GET_MULTIPLE_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_H_BASE_SERVICE_GET_MULTIPLE_RESULT))
#define T_H_BASE_SERVICE_GET_MULTIPLE_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_H_BASE_SERVICE_GET_MULTIPLE_RESULT, THBaseServiceGetMultipleResultClass))

/* struct THBaseServicePutArgs */
struct _THBaseServicePutArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * table;
  TPut * tput;
};
typedef struct _THBaseServicePutArgs THBaseServicePutArgs;

struct _THBaseServicePutArgsClass
{
  ThriftStructClass parent;
};
typedef struct _THBaseServicePutArgsClass THBaseServicePutArgsClass;

GType t_h_base_service_put_args_get_type (void);
#define TYPE_T_H_BASE_SERVICE_PUT_ARGS (t_h_base_service_put_args_get_type())
#define T_H_BASE_SERVICE_PUT_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_H_BASE_SERVICE_PUT_ARGS, THBaseServicePutArgs))
#define T_H_BASE_SERVICE_PUT_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_H_BASE_SERVICE_PUT_ARGS, THBaseServicePutArgsClass))
#define IS_T_H_BASE_SERVICE_PUT_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_H_BASE_SERVICE_PUT_ARGS))
#define IS_T_H_BASE_SERVICE_PUT_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_H_BASE_SERVICE_PUT_ARGS))
#define T_H_BASE_SERVICE_PUT_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_H_BASE_SERVICE_PUT_ARGS, THBaseServicePutArgsClass))

/* struct THBaseServicePutResult */
struct _THBaseServicePutResult
{ 
  ThriftStruct parent; 

  /* public */
  TIOError * io;
  gboolean __isset_io;
};
typedef struct _THBaseServicePutResult THBaseServicePutResult;

struct _THBaseServicePutResultClass
{
  ThriftStructClass parent;
};
typedef struct _THBaseServicePutResultClass THBaseServicePutResultClass;

GType t_h_base_service_put_result_get_type (void);
#define TYPE_T_H_BASE_SERVICE_PUT_RESULT (t_h_base_service_put_result_get_type())
#define T_H_BASE_SERVICE_PUT_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_H_BASE_SERVICE_PUT_RESULT, THBaseServicePutResult))
#define T_H_BASE_SERVICE_PUT_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_H_BASE_SERVICE_PUT_RESULT, THBaseServicePutResultClass))
#define IS_T_H_BASE_SERVICE_PUT_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_H_BASE_SERVICE_PUT_RESULT))
#define IS_T_H_BASE_SERVICE_PUT_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_H_BASE_SERVICE_PUT_RESULT))
#define T_H_BASE_SERVICE_PUT_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_H_BASE_SERVICE_PUT_RESULT, THBaseServicePutResultClass))

/* struct THBaseServiceCheckAndPutArgs */
struct _THBaseServiceCheckAndPutArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * table;
  GByteArray * row;
  GByteArray * family;
  GByteArray * qualifier;
  GByteArray * value;
  gboolean __isset_value;
  TPut * tput;
};
typedef struct _THBaseServiceCheckAndPutArgs THBaseServiceCheckAndPutArgs;

struct _THBaseServiceCheckAndPutArgsClass
{
  ThriftStructClass parent;
};
typedef struct _THBaseServiceCheckAndPutArgsClass THBaseServiceCheckAndPutArgsClass;

GType t_h_base_service_check_and_put_args_get_type (void);
#define TYPE_T_H_BASE_SERVICE_CHECK_AND_PUT_ARGS (t_h_base_service_check_and_put_args_get_type())
#define T_H_BASE_SERVICE_CHECK_AND_PUT_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_H_BASE_SERVICE_CHECK_AND_PUT_ARGS, THBaseServiceCheckAndPutArgs))
#define T_H_BASE_SERVICE_CHECK_AND_PUT_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_H_BASE_SERVICE_CHECK_AND_PUT_ARGS, THBaseServiceCheckAndPutArgsClass))
#define IS_T_H_BASE_SERVICE_CHECK_AND_PUT_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_H_BASE_SERVICE_CHECK_AND_PUT_ARGS))
#define IS_T_H_BASE_SERVICE_CHECK_AND_PUT_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_H_BASE_SERVICE_CHECK_AND_PUT_ARGS))
#define T_H_BASE_SERVICE_CHECK_AND_PUT_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_H_BASE_SERVICE_CHECK_AND_PUT_ARGS, THBaseServiceCheckAndPutArgsClass))

/* struct THBaseServiceCheckAndPutResult */
struct _THBaseServiceCheckAndPutResult
{ 
  ThriftStruct parent; 

  /* public */
  gboolean success;
  gboolean __isset_success;
  TIOError * io;
  gboolean __isset_io;
};
typedef struct _THBaseServiceCheckAndPutResult THBaseServiceCheckAndPutResult;

struct _THBaseServiceCheckAndPutResultClass
{
  ThriftStructClass parent;
};
typedef struct _THBaseServiceCheckAndPutResultClass THBaseServiceCheckAndPutResultClass;

GType t_h_base_service_check_and_put_result_get_type (void);
#define TYPE_T_H_BASE_SERVICE_CHECK_AND_PUT_RESULT (t_h_base_service_check_and_put_result_get_type())
#define T_H_BASE_SERVICE_CHECK_AND_PUT_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_H_BASE_SERVICE_CHECK_AND_PUT_RESULT, THBaseServiceCheckAndPutResult))
#define T_H_BASE_SERVICE_CHECK_AND_PUT_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_H_BASE_SERVICE_CHECK_AND_PUT_RESULT, THBaseServiceCheckAndPutResultClass))
#define IS_T_H_BASE_SERVICE_CHECK_AND_PUT_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_H_BASE_SERVICE_CHECK_AND_PUT_RESULT))
#define IS_T_H_BASE_SERVICE_CHECK_AND_PUT_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_H_BASE_SERVICE_CHECK_AND_PUT_RESULT))
#define T_H_BASE_SERVICE_CHECK_AND_PUT_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_H_BASE_SERVICE_CHECK_AND_PUT_RESULT, THBaseServiceCheckAndPutResultClass))

/* struct THBaseServicePutMultipleArgs */
struct _THBaseServicePutMultipleArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * table;
  GPtrArray * tputs;
};
typedef struct _THBaseServicePutMultipleArgs THBaseServicePutMultipleArgs;

struct _THBaseServicePutMultipleArgsClass
{
  ThriftStructClass parent;
};
typedef struct _THBaseServicePutMultipleArgsClass THBaseServicePutMultipleArgsClass;

GType t_h_base_service_put_multiple_args_get_type (void);
#define TYPE_T_H_BASE_SERVICE_PUT_MULTIPLE_ARGS (t_h_base_service_put_multiple_args_get_type())
#define T_H_BASE_SERVICE_PUT_MULTIPLE_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_H_BASE_SERVICE_PUT_MULTIPLE_ARGS, THBaseServicePutMultipleArgs))
#define T_H_BASE_SERVICE_PUT_MULTIPLE_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_H_BASE_SERVICE_PUT_MULTIPLE_ARGS, THBaseServicePutMultipleArgsClass))
#define IS_T_H_BASE_SERVICE_PUT_MULTIPLE_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_H_BASE_SERVICE_PUT_MULTIPLE_ARGS))
#define IS_T_H_BASE_SERVICE_PUT_MULTIPLE_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_H_BASE_SERVICE_PUT_MULTIPLE_ARGS))
#define T_H_BASE_SERVICE_PUT_MULTIPLE_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_H_BASE_SERVICE_PUT_MULTIPLE_ARGS, THBaseServicePutMultipleArgsClass))

/* struct THBaseServicePutMultipleResult */
struct _THBaseServicePutMultipleResult
{ 
  ThriftStruct parent; 

  /* public */
  TIOError * io;
  gboolean __isset_io;
};
typedef struct _THBaseServicePutMultipleResult THBaseServicePutMultipleResult;

struct _THBaseServicePutMultipleResultClass
{
  ThriftStructClass parent;
};
typedef struct _THBaseServicePutMultipleResultClass THBaseServicePutMultipleResultClass;

GType t_h_base_service_put_multiple_result_get_type (void);
#define TYPE_T_H_BASE_SERVICE_PUT_MULTIPLE_RESULT (t_h_base_service_put_multiple_result_get_type())
#define T_H_BASE_SERVICE_PUT_MULTIPLE_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_H_BASE_SERVICE_PUT_MULTIPLE_RESULT, THBaseServicePutMultipleResult))
#define T_H_BASE_SERVICE_PUT_MULTIPLE_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_H_BASE_SERVICE_PUT_MULTIPLE_RESULT, THBaseServicePutMultipleResultClass))
#define IS_T_H_BASE_SERVICE_PUT_MULTIPLE_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_H_BASE_SERVICE_PUT_MULTIPLE_RESULT))
#define IS_T_H_BASE_SERVICE_PUT_MULTIPLE_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_H_BASE_SERVICE_PUT_MULTIPLE_RESULT))
#define T_H_BASE_SERVICE_PUT_MULTIPLE_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_H_BASE_SERVICE_PUT_MULTIPLE_RESULT, THBaseServicePutMultipleResultClass))

/* struct THBaseServiceDeleteSingleArgs */
struct _THBaseServiceDeleteSingleArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * table;
  TDelete * tdelete;
};
typedef struct _THBaseServiceDeleteSingleArgs THBaseServiceDeleteSingleArgs;

struct _THBaseServiceDeleteSingleArgsClass
{
  ThriftStructClass parent;
};
typedef struct _THBaseServiceDeleteSingleArgsClass THBaseServiceDeleteSingleArgsClass;

GType t_h_base_service_delete_single_args_get_type (void);
#define TYPE_T_H_BASE_SERVICE_DELETE_SINGLE_ARGS (t_h_base_service_delete_single_args_get_type())
#define T_H_BASE_SERVICE_DELETE_SINGLE_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_H_BASE_SERVICE_DELETE_SINGLE_ARGS, THBaseServiceDeleteSingleArgs))
#define T_H_BASE_SERVICE_DELETE_SINGLE_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_H_BASE_SERVICE_DELETE_SINGLE_ARGS, THBaseServiceDeleteSingleArgsClass))
#define IS_T_H_BASE_SERVICE_DELETE_SINGLE_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_H_BASE_SERVICE_DELETE_SINGLE_ARGS))
#define IS_T_H_BASE_SERVICE_DELETE_SINGLE_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_H_BASE_SERVICE_DELETE_SINGLE_ARGS))
#define T_H_BASE_SERVICE_DELETE_SINGLE_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_H_BASE_SERVICE_DELETE_SINGLE_ARGS, THBaseServiceDeleteSingleArgsClass))

/* struct THBaseServiceDeleteSingleResult */
struct _THBaseServiceDeleteSingleResult
{ 
  ThriftStruct parent; 

  /* public */
  TIOError * io;
  gboolean __isset_io;
};
typedef struct _THBaseServiceDeleteSingleResult THBaseServiceDeleteSingleResult;

struct _THBaseServiceDeleteSingleResultClass
{
  ThriftStructClass parent;
};
typedef struct _THBaseServiceDeleteSingleResultClass THBaseServiceDeleteSingleResultClass;

GType t_h_base_service_delete_single_result_get_type (void);
#define TYPE_T_H_BASE_SERVICE_DELETE_SINGLE_RESULT (t_h_base_service_delete_single_result_get_type())
#define T_H_BASE_SERVICE_DELETE_SINGLE_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_H_BASE_SERVICE_DELETE_SINGLE_RESULT, THBaseServiceDeleteSingleResult))
#define T_H_BASE_SERVICE_DELETE_SINGLE_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_H_BASE_SERVICE_DELETE_SINGLE_RESULT, THBaseServiceDeleteSingleResultClass))
#define IS_T_H_BASE_SERVICE_DELETE_SINGLE_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_H_BASE_SERVICE_DELETE_SINGLE_RESULT))
#define IS_T_H_BASE_SERVICE_DELETE_SINGLE_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_H_BASE_SERVICE_DELETE_SINGLE_RESULT))
#define T_H_BASE_SERVICE_DELETE_SINGLE_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_H_BASE_SERVICE_DELETE_SINGLE_RESULT, THBaseServiceDeleteSingleResultClass))

/* struct THBaseServiceDeleteMultipleArgs */
struct _THBaseServiceDeleteMultipleArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * table;
  GPtrArray * tdeletes;
};
typedef struct _THBaseServiceDeleteMultipleArgs THBaseServiceDeleteMultipleArgs;

struct _THBaseServiceDeleteMultipleArgsClass
{
  ThriftStructClass parent;
};
typedef struct _THBaseServiceDeleteMultipleArgsClass THBaseServiceDeleteMultipleArgsClass;

GType t_h_base_service_delete_multiple_args_get_type (void);
#define TYPE_T_H_BASE_SERVICE_DELETE_MULTIPLE_ARGS (t_h_base_service_delete_multiple_args_get_type())
#define T_H_BASE_SERVICE_DELETE_MULTIPLE_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_H_BASE_SERVICE_DELETE_MULTIPLE_ARGS, THBaseServiceDeleteMultipleArgs))
#define T_H_BASE_SERVICE_DELETE_MULTIPLE_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_H_BASE_SERVICE_DELETE_MULTIPLE_ARGS, THBaseServiceDeleteMultipleArgsClass))
#define IS_T_H_BASE_SERVICE_DELETE_MULTIPLE_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_H_BASE_SERVICE_DELETE_MULTIPLE_ARGS))
#define IS_T_H_BASE_SERVICE_DELETE_MULTIPLE_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_H_BASE_SERVICE_DELETE_MULTIPLE_ARGS))
#define T_H_BASE_SERVICE_DELETE_MULTIPLE_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_H_BASE_SERVICE_DELETE_MULTIPLE_ARGS, THBaseServiceDeleteMultipleArgsClass))

/* struct THBaseServiceDeleteMultipleResult */
struct _THBaseServiceDeleteMultipleResult
{ 
  ThriftStruct parent; 

  /* public */
  GPtrArray * success;
  gboolean __isset_success;
  TIOError * io;
  gboolean __isset_io;
};
typedef struct _THBaseServiceDeleteMultipleResult THBaseServiceDeleteMultipleResult;

struct _THBaseServiceDeleteMultipleResultClass
{
  ThriftStructClass parent;
};
typedef struct _THBaseServiceDeleteMultipleResultClass THBaseServiceDeleteMultipleResultClass;

GType t_h_base_service_delete_multiple_result_get_type (void);
#define TYPE_T_H_BASE_SERVICE_DELETE_MULTIPLE_RESULT (t_h_base_service_delete_multiple_result_get_type())
#define T_H_BASE_SERVICE_DELETE_MULTIPLE_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_H_BASE_SERVICE_DELETE_MULTIPLE_RESULT, THBaseServiceDeleteMultipleResult))
#define T_H_BASE_SERVICE_DELETE_MULTIPLE_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_H_BASE_SERVICE_DELETE_MULTIPLE_RESULT, THBaseServiceDeleteMultipleResultClass))
#define IS_T_H_BASE_SERVICE_DELETE_MULTIPLE_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_H_BASE_SERVICE_DELETE_MULTIPLE_RESULT))
#define IS_T_H_BASE_SERVICE_DELETE_MULTIPLE_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_H_BASE_SERVICE_DELETE_MULTIPLE_RESULT))
#define T_H_BASE_SERVICE_DELETE_MULTIPLE_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_H_BASE_SERVICE_DELETE_MULTIPLE_RESULT, THBaseServiceDeleteMultipleResultClass))

/* struct THBaseServiceCheckAndDeleteArgs */
struct _THBaseServiceCheckAndDeleteArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * table;
  GByteArray * row;
  GByteArray * family;
  GByteArray * qualifier;
  GByteArray * value;
  gboolean __isset_value;
  TDelete * tdelete;
};
typedef struct _THBaseServiceCheckAndDeleteArgs THBaseServiceCheckAndDeleteArgs;

struct _THBaseServiceCheckAndDeleteArgsClass
{
  ThriftStructClass parent;
};
typedef struct _THBaseServiceCheckAndDeleteArgsClass THBaseServiceCheckAndDeleteArgsClass;

GType t_h_base_service_check_and_delete_args_get_type (void);
#define TYPE_T_H_BASE_SERVICE_CHECK_AND_DELETE_ARGS (t_h_base_service_check_and_delete_args_get_type())
#define T_H_BASE_SERVICE_CHECK_AND_DELETE_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_H_BASE_SERVICE_CHECK_AND_DELETE_ARGS, THBaseServiceCheckAndDeleteArgs))
#define T_H_BASE_SERVICE_CHECK_AND_DELETE_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_H_BASE_SERVICE_CHECK_AND_DELETE_ARGS, THBaseServiceCheckAndDeleteArgsClass))
#define IS_T_H_BASE_SERVICE_CHECK_AND_DELETE_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_H_BASE_SERVICE_CHECK_AND_DELETE_ARGS))
#define IS_T_H_BASE_SERVICE_CHECK_AND_DELETE_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_H_BASE_SERVICE_CHECK_AND_DELETE_ARGS))
#define T_H_BASE_SERVICE_CHECK_AND_DELETE_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_H_BASE_SERVICE_CHECK_AND_DELETE_ARGS, THBaseServiceCheckAndDeleteArgsClass))

/* struct THBaseServiceCheckAndDeleteResult */
struct _THBaseServiceCheckAndDeleteResult
{ 
  ThriftStruct parent; 

  /* public */
  gboolean success;
  gboolean __isset_success;
  TIOError * io;
  gboolean __isset_io;
};
typedef struct _THBaseServiceCheckAndDeleteResult THBaseServiceCheckAndDeleteResult;

struct _THBaseServiceCheckAndDeleteResultClass
{
  ThriftStructClass parent;
};
typedef struct _THBaseServiceCheckAndDeleteResultClass THBaseServiceCheckAndDeleteResultClass;

GType t_h_base_service_check_and_delete_result_get_type (void);
#define TYPE_T_H_BASE_SERVICE_CHECK_AND_DELETE_RESULT (t_h_base_service_check_and_delete_result_get_type())
#define T_H_BASE_SERVICE_CHECK_AND_DELETE_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_H_BASE_SERVICE_CHECK_AND_DELETE_RESULT, THBaseServiceCheckAndDeleteResult))
#define T_H_BASE_SERVICE_CHECK_AND_DELETE_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_H_BASE_SERVICE_CHECK_AND_DELETE_RESULT, THBaseServiceCheckAndDeleteResultClass))
#define IS_T_H_BASE_SERVICE_CHECK_AND_DELETE_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_H_BASE_SERVICE_CHECK_AND_DELETE_RESULT))
#define IS_T_H_BASE_SERVICE_CHECK_AND_DELETE_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_H_BASE_SERVICE_CHECK_AND_DELETE_RESULT))
#define T_H_BASE_SERVICE_CHECK_AND_DELETE_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_H_BASE_SERVICE_CHECK_AND_DELETE_RESULT, THBaseServiceCheckAndDeleteResultClass))

/* struct THBaseServiceIncrementArgs */
struct _THBaseServiceIncrementArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * table;
  TIncrement * tincrement;
};
typedef struct _THBaseServiceIncrementArgs THBaseServiceIncrementArgs;

struct _THBaseServiceIncrementArgsClass
{
  ThriftStructClass parent;
};
typedef struct _THBaseServiceIncrementArgsClass THBaseServiceIncrementArgsClass;

GType t_h_base_service_increment_args_get_type (void);
#define TYPE_T_H_BASE_SERVICE_INCREMENT_ARGS (t_h_base_service_increment_args_get_type())
#define T_H_BASE_SERVICE_INCREMENT_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_H_BASE_SERVICE_INCREMENT_ARGS, THBaseServiceIncrementArgs))
#define T_H_BASE_SERVICE_INCREMENT_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_H_BASE_SERVICE_INCREMENT_ARGS, THBaseServiceIncrementArgsClass))
#define IS_T_H_BASE_SERVICE_INCREMENT_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_H_BASE_SERVICE_INCREMENT_ARGS))
#define IS_T_H_BASE_SERVICE_INCREMENT_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_H_BASE_SERVICE_INCREMENT_ARGS))
#define T_H_BASE_SERVICE_INCREMENT_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_H_BASE_SERVICE_INCREMENT_ARGS, THBaseServiceIncrementArgsClass))

/* struct THBaseServiceIncrementResult */
struct _THBaseServiceIncrementResult
{ 
  ThriftStruct parent; 

  /* public */
  TResult * success;
  gboolean __isset_success;
  TIOError * io;
  gboolean __isset_io;
};
typedef struct _THBaseServiceIncrementResult THBaseServiceIncrementResult;

struct _THBaseServiceIncrementResultClass
{
  ThriftStructClass parent;
};
typedef struct _THBaseServiceIncrementResultClass THBaseServiceIncrementResultClass;

GType t_h_base_service_increment_result_get_type (void);
#define TYPE_T_H_BASE_SERVICE_INCREMENT_RESULT (t_h_base_service_increment_result_get_type())
#define T_H_BASE_SERVICE_INCREMENT_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_H_BASE_SERVICE_INCREMENT_RESULT, THBaseServiceIncrementResult))
#define T_H_BASE_SERVICE_INCREMENT_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_H_BASE_SERVICE_INCREMENT_RESULT, THBaseServiceIncrementResultClass))
#define IS_T_H_BASE_SERVICE_INCREMENT_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_H_BASE_SERVICE_INCREMENT_RESULT))
#define IS_T_H_BASE_SERVICE_INCREMENT_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_H_BASE_SERVICE_INCREMENT_RESULT))
#define T_H_BASE_SERVICE_INCREMENT_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_H_BASE_SERVICE_INCREMENT_RESULT, THBaseServiceIncrementResultClass))

/* struct THBaseServiceAppendArgs */
struct _THBaseServiceAppendArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * table;
  TAppend * tappend;
};
typedef struct _THBaseServiceAppendArgs THBaseServiceAppendArgs;

struct _THBaseServiceAppendArgsClass
{
  ThriftStructClass parent;
};
typedef struct _THBaseServiceAppendArgsClass THBaseServiceAppendArgsClass;

GType t_h_base_service_append_args_get_type (void);
#define TYPE_T_H_BASE_SERVICE_APPEND_ARGS (t_h_base_service_append_args_get_type())
#define T_H_BASE_SERVICE_APPEND_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_H_BASE_SERVICE_APPEND_ARGS, THBaseServiceAppendArgs))
#define T_H_BASE_SERVICE_APPEND_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_H_BASE_SERVICE_APPEND_ARGS, THBaseServiceAppendArgsClass))
#define IS_T_H_BASE_SERVICE_APPEND_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_H_BASE_SERVICE_APPEND_ARGS))
#define IS_T_H_BASE_SERVICE_APPEND_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_H_BASE_SERVICE_APPEND_ARGS))
#define T_H_BASE_SERVICE_APPEND_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_H_BASE_SERVICE_APPEND_ARGS, THBaseServiceAppendArgsClass))

/* struct THBaseServiceAppendResult */
struct _THBaseServiceAppendResult
{ 
  ThriftStruct parent; 

  /* public */
  TResult * success;
  gboolean __isset_success;
  TIOError * io;
  gboolean __isset_io;
};
typedef struct _THBaseServiceAppendResult THBaseServiceAppendResult;

struct _THBaseServiceAppendResultClass
{
  ThriftStructClass parent;
};
typedef struct _THBaseServiceAppendResultClass THBaseServiceAppendResultClass;

GType t_h_base_service_append_result_get_type (void);
#define TYPE_T_H_BASE_SERVICE_APPEND_RESULT (t_h_base_service_append_result_get_type())
#define T_H_BASE_SERVICE_APPEND_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_H_BASE_SERVICE_APPEND_RESULT, THBaseServiceAppendResult))
#define T_H_BASE_SERVICE_APPEND_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_H_BASE_SERVICE_APPEND_RESULT, THBaseServiceAppendResultClass))
#define IS_T_H_BASE_SERVICE_APPEND_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_H_BASE_SERVICE_APPEND_RESULT))
#define IS_T_H_BASE_SERVICE_APPEND_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_H_BASE_SERVICE_APPEND_RESULT))
#define T_H_BASE_SERVICE_APPEND_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_H_BASE_SERVICE_APPEND_RESULT, THBaseServiceAppendResultClass))

/* struct THBaseServiceOpenScannerArgs */
struct _THBaseServiceOpenScannerArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * table;
  TScan * tscan;
};
typedef struct _THBaseServiceOpenScannerArgs THBaseServiceOpenScannerArgs;

struct _THBaseServiceOpenScannerArgsClass
{
  ThriftStructClass parent;
};
typedef struct _THBaseServiceOpenScannerArgsClass THBaseServiceOpenScannerArgsClass;

GType t_h_base_service_open_scanner_args_get_type (void);
#define TYPE_T_H_BASE_SERVICE_OPEN_SCANNER_ARGS (t_h_base_service_open_scanner_args_get_type())
#define T_H_BASE_SERVICE_OPEN_SCANNER_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_H_BASE_SERVICE_OPEN_SCANNER_ARGS, THBaseServiceOpenScannerArgs))
#define T_H_BASE_SERVICE_OPEN_SCANNER_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_H_BASE_SERVICE_OPEN_SCANNER_ARGS, THBaseServiceOpenScannerArgsClass))
#define IS_T_H_BASE_SERVICE_OPEN_SCANNER_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_H_BASE_SERVICE_OPEN_SCANNER_ARGS))
#define IS_T_H_BASE_SERVICE_OPEN_SCANNER_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_H_BASE_SERVICE_OPEN_SCANNER_ARGS))
#define T_H_BASE_SERVICE_OPEN_SCANNER_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_H_BASE_SERVICE_OPEN_SCANNER_ARGS, THBaseServiceOpenScannerArgsClass))

/* struct THBaseServiceOpenScannerResult */
struct _THBaseServiceOpenScannerResult
{ 
  ThriftStruct parent; 

  /* public */
  gint32 success;
  gboolean __isset_success;
  TIOError * io;
  gboolean __isset_io;
};
typedef struct _THBaseServiceOpenScannerResult THBaseServiceOpenScannerResult;

struct _THBaseServiceOpenScannerResultClass
{
  ThriftStructClass parent;
};
typedef struct _THBaseServiceOpenScannerResultClass THBaseServiceOpenScannerResultClass;

GType t_h_base_service_open_scanner_result_get_type (void);
#define TYPE_T_H_BASE_SERVICE_OPEN_SCANNER_RESULT (t_h_base_service_open_scanner_result_get_type())
#define T_H_BASE_SERVICE_OPEN_SCANNER_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_H_BASE_SERVICE_OPEN_SCANNER_RESULT, THBaseServiceOpenScannerResult))
#define T_H_BASE_SERVICE_OPEN_SCANNER_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_H_BASE_SERVICE_OPEN_SCANNER_RESULT, THBaseServiceOpenScannerResultClass))
#define IS_T_H_BASE_SERVICE_OPEN_SCANNER_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_H_BASE_SERVICE_OPEN_SCANNER_RESULT))
#define IS_T_H_BASE_SERVICE_OPEN_SCANNER_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_H_BASE_SERVICE_OPEN_SCANNER_RESULT))
#define T_H_BASE_SERVICE_OPEN_SCANNER_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_H_BASE_SERVICE_OPEN_SCANNER_RESULT, THBaseServiceOpenScannerResultClass))

/* struct THBaseServiceGetScannerRowsArgs */
struct _THBaseServiceGetScannerRowsArgs
{ 
  ThriftStruct parent; 

  /* public */
  gint32 scannerId;
  gint32 numRows;
  gboolean __isset_numRows;
};
typedef struct _THBaseServiceGetScannerRowsArgs THBaseServiceGetScannerRowsArgs;

struct _THBaseServiceGetScannerRowsArgsClass
{
  ThriftStructClass parent;
};
typedef struct _THBaseServiceGetScannerRowsArgsClass THBaseServiceGetScannerRowsArgsClass;

GType t_h_base_service_get_scanner_rows_args_get_type (void);
#define TYPE_T_H_BASE_SERVICE_GET_SCANNER_ROWS_ARGS (t_h_base_service_get_scanner_rows_args_get_type())
#define T_H_BASE_SERVICE_GET_SCANNER_ROWS_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_H_BASE_SERVICE_GET_SCANNER_ROWS_ARGS, THBaseServiceGetScannerRowsArgs))
#define T_H_BASE_SERVICE_GET_SCANNER_ROWS_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_H_BASE_SERVICE_GET_SCANNER_ROWS_ARGS, THBaseServiceGetScannerRowsArgsClass))
#define IS_T_H_BASE_SERVICE_GET_SCANNER_ROWS_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_H_BASE_SERVICE_GET_SCANNER_ROWS_ARGS))
#define IS_T_H_BASE_SERVICE_GET_SCANNER_ROWS_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_H_BASE_SERVICE_GET_SCANNER_ROWS_ARGS))
#define T_H_BASE_SERVICE_GET_SCANNER_ROWS_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_H_BASE_SERVICE_GET_SCANNER_ROWS_ARGS, THBaseServiceGetScannerRowsArgsClass))

/* struct THBaseServiceGetScannerRowsResult */
struct _THBaseServiceGetScannerRowsResult
{ 
  ThriftStruct parent; 

  /* public */
  GPtrArray * success;
  gboolean __isset_success;
  TIOError * io;
  gboolean __isset_io;
  TIllegalArgument * ia;
  gboolean __isset_ia;
};
typedef struct _THBaseServiceGetScannerRowsResult THBaseServiceGetScannerRowsResult;

struct _THBaseServiceGetScannerRowsResultClass
{
  ThriftStructClass parent;
};
typedef struct _THBaseServiceGetScannerRowsResultClass THBaseServiceGetScannerRowsResultClass;

GType t_h_base_service_get_scanner_rows_result_get_type (void);
#define TYPE_T_H_BASE_SERVICE_GET_SCANNER_ROWS_RESULT (t_h_base_service_get_scanner_rows_result_get_type())
#define T_H_BASE_SERVICE_GET_SCANNER_ROWS_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_H_BASE_SERVICE_GET_SCANNER_ROWS_RESULT, THBaseServiceGetScannerRowsResult))
#define T_H_BASE_SERVICE_GET_SCANNER_ROWS_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_H_BASE_SERVICE_GET_SCANNER_ROWS_RESULT, THBaseServiceGetScannerRowsResultClass))
#define IS_T_H_BASE_SERVICE_GET_SCANNER_ROWS_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_H_BASE_SERVICE_GET_SCANNER_ROWS_RESULT))
#define IS_T_H_BASE_SERVICE_GET_SCANNER_ROWS_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_H_BASE_SERVICE_GET_SCANNER_ROWS_RESULT))
#define T_H_BASE_SERVICE_GET_SCANNER_ROWS_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_H_BASE_SERVICE_GET_SCANNER_ROWS_RESULT, THBaseServiceGetScannerRowsResultClass))

/* struct THBaseServiceCloseScannerArgs */
struct _THBaseServiceCloseScannerArgs
{ 
  ThriftStruct parent; 

  /* public */
  gint32 scannerId;
};
typedef struct _THBaseServiceCloseScannerArgs THBaseServiceCloseScannerArgs;

struct _THBaseServiceCloseScannerArgsClass
{
  ThriftStructClass parent;
};
typedef struct _THBaseServiceCloseScannerArgsClass THBaseServiceCloseScannerArgsClass;

GType t_h_base_service_close_scanner_args_get_type (void);
#define TYPE_T_H_BASE_SERVICE_CLOSE_SCANNER_ARGS (t_h_base_service_close_scanner_args_get_type())
#define T_H_BASE_SERVICE_CLOSE_SCANNER_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_H_BASE_SERVICE_CLOSE_SCANNER_ARGS, THBaseServiceCloseScannerArgs))
#define T_H_BASE_SERVICE_CLOSE_SCANNER_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_H_BASE_SERVICE_CLOSE_SCANNER_ARGS, THBaseServiceCloseScannerArgsClass))
#define IS_T_H_BASE_SERVICE_CLOSE_SCANNER_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_H_BASE_SERVICE_CLOSE_SCANNER_ARGS))
#define IS_T_H_BASE_SERVICE_CLOSE_SCANNER_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_H_BASE_SERVICE_CLOSE_SCANNER_ARGS))
#define T_H_BASE_SERVICE_CLOSE_SCANNER_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_H_BASE_SERVICE_CLOSE_SCANNER_ARGS, THBaseServiceCloseScannerArgsClass))

/* struct THBaseServiceCloseScannerResult */
struct _THBaseServiceCloseScannerResult
{ 
  ThriftStruct parent; 

  /* public */
  TIOError * io;
  gboolean __isset_io;
  TIllegalArgument * ia;
  gboolean __isset_ia;
};
typedef struct _THBaseServiceCloseScannerResult THBaseServiceCloseScannerResult;

struct _THBaseServiceCloseScannerResultClass
{
  ThriftStructClass parent;
};
typedef struct _THBaseServiceCloseScannerResultClass THBaseServiceCloseScannerResultClass;

GType t_h_base_service_close_scanner_result_get_type (void);
#define TYPE_T_H_BASE_SERVICE_CLOSE_SCANNER_RESULT (t_h_base_service_close_scanner_result_get_type())
#define T_H_BASE_SERVICE_CLOSE_SCANNER_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_H_BASE_SERVICE_CLOSE_SCANNER_RESULT, THBaseServiceCloseScannerResult))
#define T_H_BASE_SERVICE_CLOSE_SCANNER_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_H_BASE_SERVICE_CLOSE_SCANNER_RESULT, THBaseServiceCloseScannerResultClass))
#define IS_T_H_BASE_SERVICE_CLOSE_SCANNER_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_H_BASE_SERVICE_CLOSE_SCANNER_RESULT))
#define IS_T_H_BASE_SERVICE_CLOSE_SCANNER_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_H_BASE_SERVICE_CLOSE_SCANNER_RESULT))
#define T_H_BASE_SERVICE_CLOSE_SCANNER_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_H_BASE_SERVICE_CLOSE_SCANNER_RESULT, THBaseServiceCloseScannerResultClass))

/* struct THBaseServiceMutateRowArgs */
struct _THBaseServiceMutateRowArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * table;
  TRowMutations * trowMutations;
};
typedef struct _THBaseServiceMutateRowArgs THBaseServiceMutateRowArgs;

struct _THBaseServiceMutateRowArgsClass
{
  ThriftStructClass parent;
};
typedef struct _THBaseServiceMutateRowArgsClass THBaseServiceMutateRowArgsClass;

GType t_h_base_service_mutate_row_args_get_type (void);
#define TYPE_T_H_BASE_SERVICE_MUTATE_ROW_ARGS (t_h_base_service_mutate_row_args_get_type())
#define T_H_BASE_SERVICE_MUTATE_ROW_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_H_BASE_SERVICE_MUTATE_ROW_ARGS, THBaseServiceMutateRowArgs))
#define T_H_BASE_SERVICE_MUTATE_ROW_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_H_BASE_SERVICE_MUTATE_ROW_ARGS, THBaseServiceMutateRowArgsClass))
#define IS_T_H_BASE_SERVICE_MUTATE_ROW_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_H_BASE_SERVICE_MUTATE_ROW_ARGS))
#define IS_T_H_BASE_SERVICE_MUTATE_ROW_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_H_BASE_SERVICE_MUTATE_ROW_ARGS))
#define T_H_BASE_SERVICE_MUTATE_ROW_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_H_BASE_SERVICE_MUTATE_ROW_ARGS, THBaseServiceMutateRowArgsClass))

/* struct THBaseServiceMutateRowResult */
struct _THBaseServiceMutateRowResult
{ 
  ThriftStruct parent; 

  /* public */
  TIOError * io;
  gboolean __isset_io;
};
typedef struct _THBaseServiceMutateRowResult THBaseServiceMutateRowResult;

struct _THBaseServiceMutateRowResultClass
{
  ThriftStructClass parent;
};
typedef struct _THBaseServiceMutateRowResultClass THBaseServiceMutateRowResultClass;

GType t_h_base_service_mutate_row_result_get_type (void);
#define TYPE_T_H_BASE_SERVICE_MUTATE_ROW_RESULT (t_h_base_service_mutate_row_result_get_type())
#define T_H_BASE_SERVICE_MUTATE_ROW_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_H_BASE_SERVICE_MUTATE_ROW_RESULT, THBaseServiceMutateRowResult))
#define T_H_BASE_SERVICE_MUTATE_ROW_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_H_BASE_SERVICE_MUTATE_ROW_RESULT, THBaseServiceMutateRowResultClass))
#define IS_T_H_BASE_SERVICE_MUTATE_ROW_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_H_BASE_SERVICE_MUTATE_ROW_RESULT))
#define IS_T_H_BASE_SERVICE_MUTATE_ROW_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_H_BASE_SERVICE_MUTATE_ROW_RESULT))
#define T_H_BASE_SERVICE_MUTATE_ROW_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_H_BASE_SERVICE_MUTATE_ROW_RESULT, THBaseServiceMutateRowResultClass))

/* struct THBaseServiceGetScannerResultsArgs */
struct _THBaseServiceGetScannerResultsArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * table;
  TScan * tscan;
  gint32 numRows;
  gboolean __isset_numRows;
};
typedef struct _THBaseServiceGetScannerResultsArgs THBaseServiceGetScannerResultsArgs;

struct _THBaseServiceGetScannerResultsArgsClass
{
  ThriftStructClass parent;
};
typedef struct _THBaseServiceGetScannerResultsArgsClass THBaseServiceGetScannerResultsArgsClass;

GType t_h_base_service_get_scanner_results_args_get_type (void);
#define TYPE_T_H_BASE_SERVICE_GET_SCANNER_RESULTS_ARGS (t_h_base_service_get_scanner_results_args_get_type())
#define T_H_BASE_SERVICE_GET_SCANNER_RESULTS_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_H_BASE_SERVICE_GET_SCANNER_RESULTS_ARGS, THBaseServiceGetScannerResultsArgs))
#define T_H_BASE_SERVICE_GET_SCANNER_RESULTS_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_H_BASE_SERVICE_GET_SCANNER_RESULTS_ARGS, THBaseServiceGetScannerResultsArgsClass))
#define IS_T_H_BASE_SERVICE_GET_SCANNER_RESULTS_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_H_BASE_SERVICE_GET_SCANNER_RESULTS_ARGS))
#define IS_T_H_BASE_SERVICE_GET_SCANNER_RESULTS_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_H_BASE_SERVICE_GET_SCANNER_RESULTS_ARGS))
#define T_H_BASE_SERVICE_GET_SCANNER_RESULTS_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_H_BASE_SERVICE_GET_SCANNER_RESULTS_ARGS, THBaseServiceGetScannerResultsArgsClass))

/* struct THBaseServiceGetScannerResultsResult */
struct _THBaseServiceGetScannerResultsResult
{ 
  ThriftStruct parent; 

  /* public */
  GPtrArray * success;
  gboolean __isset_success;
  TIOError * io;
  gboolean __isset_io;
};
typedef struct _THBaseServiceGetScannerResultsResult THBaseServiceGetScannerResultsResult;

struct _THBaseServiceGetScannerResultsResultClass
{
  ThriftStructClass parent;
};
typedef struct _THBaseServiceGetScannerResultsResultClass THBaseServiceGetScannerResultsResultClass;

GType t_h_base_service_get_scanner_results_result_get_type (void);
#define TYPE_T_H_BASE_SERVICE_GET_SCANNER_RESULTS_RESULT (t_h_base_service_get_scanner_results_result_get_type())
#define T_H_BASE_SERVICE_GET_SCANNER_RESULTS_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_H_BASE_SERVICE_GET_SCANNER_RESULTS_RESULT, THBaseServiceGetScannerResultsResult))
#define T_H_BASE_SERVICE_GET_SCANNER_RESULTS_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_H_BASE_SERVICE_GET_SCANNER_RESULTS_RESULT, THBaseServiceGetScannerResultsResultClass))
#define IS_T_H_BASE_SERVICE_GET_SCANNER_RESULTS_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_H_BASE_SERVICE_GET_SCANNER_RESULTS_RESULT))
#define IS_T_H_BASE_SERVICE_GET_SCANNER_RESULTS_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_H_BASE_SERVICE_GET_SCANNER_RESULTS_RESULT))
#define T_H_BASE_SERVICE_GET_SCANNER_RESULTS_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_H_BASE_SERVICE_GET_SCANNER_RESULTS_RESULT, THBaseServiceGetScannerResultsResultClass))

/* struct THBaseServiceGetRegionLocationArgs */
struct _THBaseServiceGetRegionLocationArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * table;
  GByteArray * row;
  gboolean reload;
  gboolean __isset_reload;
};
typedef struct _THBaseServiceGetRegionLocationArgs THBaseServiceGetRegionLocationArgs;

struct _THBaseServiceGetRegionLocationArgsClass
{
  ThriftStructClass parent;
};
typedef struct _THBaseServiceGetRegionLocationArgsClass THBaseServiceGetRegionLocationArgsClass;

GType t_h_base_service_get_region_location_args_get_type (void);
#define TYPE_T_H_BASE_SERVICE_GET_REGION_LOCATION_ARGS (t_h_base_service_get_region_location_args_get_type())
#define T_H_BASE_SERVICE_GET_REGION_LOCATION_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_H_BASE_SERVICE_GET_REGION_LOCATION_ARGS, THBaseServiceGetRegionLocationArgs))
#define T_H_BASE_SERVICE_GET_REGION_LOCATION_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_H_BASE_SERVICE_GET_REGION_LOCATION_ARGS, THBaseServiceGetRegionLocationArgsClass))
#define IS_T_H_BASE_SERVICE_GET_REGION_LOCATION_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_H_BASE_SERVICE_GET_REGION_LOCATION_ARGS))
#define IS_T_H_BASE_SERVICE_GET_REGION_LOCATION_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_H_BASE_SERVICE_GET_REGION_LOCATION_ARGS))
#define T_H_BASE_SERVICE_GET_REGION_LOCATION_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_H_BASE_SERVICE_GET_REGION_LOCATION_ARGS, THBaseServiceGetRegionLocationArgsClass))

/* struct THBaseServiceGetRegionLocationResult */
struct _THBaseServiceGetRegionLocationResult
{ 
  ThriftStruct parent; 

  /* public */
  THRegionLocation * success;
  gboolean __isset_success;
  TIOError * io;
  gboolean __isset_io;
};
typedef struct _THBaseServiceGetRegionLocationResult THBaseServiceGetRegionLocationResult;

struct _THBaseServiceGetRegionLocationResultClass
{
  ThriftStructClass parent;
};
typedef struct _THBaseServiceGetRegionLocationResultClass THBaseServiceGetRegionLocationResultClass;

GType t_h_base_service_get_region_location_result_get_type (void);
#define TYPE_T_H_BASE_SERVICE_GET_REGION_LOCATION_RESULT (t_h_base_service_get_region_location_result_get_type())
#define T_H_BASE_SERVICE_GET_REGION_LOCATION_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_H_BASE_SERVICE_GET_REGION_LOCATION_RESULT, THBaseServiceGetRegionLocationResult))
#define T_H_BASE_SERVICE_GET_REGION_LOCATION_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_H_BASE_SERVICE_GET_REGION_LOCATION_RESULT, THBaseServiceGetRegionLocationResultClass))
#define IS_T_H_BASE_SERVICE_GET_REGION_LOCATION_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_H_BASE_SERVICE_GET_REGION_LOCATION_RESULT))
#define IS_T_H_BASE_SERVICE_GET_REGION_LOCATION_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_H_BASE_SERVICE_GET_REGION_LOCATION_RESULT))
#define T_H_BASE_SERVICE_GET_REGION_LOCATION_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_H_BASE_SERVICE_GET_REGION_LOCATION_RESULT, THBaseServiceGetRegionLocationResultClass))

/* struct THBaseServiceGetAllRegionLocationsArgs */
struct _THBaseServiceGetAllRegionLocationsArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * table;
};
typedef struct _THBaseServiceGetAllRegionLocationsArgs THBaseServiceGetAllRegionLocationsArgs;

struct _THBaseServiceGetAllRegionLocationsArgsClass
{
  ThriftStructClass parent;
};
typedef struct _THBaseServiceGetAllRegionLocationsArgsClass THBaseServiceGetAllRegionLocationsArgsClass;

GType t_h_base_service_get_all_region_locations_args_get_type (void);
#define TYPE_T_H_BASE_SERVICE_GET_ALL_REGION_LOCATIONS_ARGS (t_h_base_service_get_all_region_locations_args_get_type())
#define T_H_BASE_SERVICE_GET_ALL_REGION_LOCATIONS_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_H_BASE_SERVICE_GET_ALL_REGION_LOCATIONS_ARGS, THBaseServiceGetAllRegionLocationsArgs))
#define T_H_BASE_SERVICE_GET_ALL_REGION_LOCATIONS_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_H_BASE_SERVICE_GET_ALL_REGION_LOCATIONS_ARGS, THBaseServiceGetAllRegionLocationsArgsClass))
#define IS_T_H_BASE_SERVICE_GET_ALL_REGION_LOCATIONS_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_H_BASE_SERVICE_GET_ALL_REGION_LOCATIONS_ARGS))
#define IS_T_H_BASE_SERVICE_GET_ALL_REGION_LOCATIONS_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_H_BASE_SERVICE_GET_ALL_REGION_LOCATIONS_ARGS))
#define T_H_BASE_SERVICE_GET_ALL_REGION_LOCATIONS_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_H_BASE_SERVICE_GET_ALL_REGION_LOCATIONS_ARGS, THBaseServiceGetAllRegionLocationsArgsClass))

/* struct THBaseServiceGetAllRegionLocationsResult */
struct _THBaseServiceGetAllRegionLocationsResult
{ 
  ThriftStruct parent; 

  /* public */
  GPtrArray * success;
  gboolean __isset_success;
  TIOError * io;
  gboolean __isset_io;
};
typedef struct _THBaseServiceGetAllRegionLocationsResult THBaseServiceGetAllRegionLocationsResult;

struct _THBaseServiceGetAllRegionLocationsResultClass
{
  ThriftStructClass parent;
};
typedef struct _THBaseServiceGetAllRegionLocationsResultClass THBaseServiceGetAllRegionLocationsResultClass;

GType t_h_base_service_get_all_region_locations_result_get_type (void);
#define TYPE_T_H_BASE_SERVICE_GET_ALL_REGION_LOCATIONS_RESULT (t_h_base_service_get_all_region_locations_result_get_type())
#define T_H_BASE_SERVICE_GET_ALL_REGION_LOCATIONS_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_H_BASE_SERVICE_GET_ALL_REGION_LOCATIONS_RESULT, THBaseServiceGetAllRegionLocationsResult))
#define T_H_BASE_SERVICE_GET_ALL_REGION_LOCATIONS_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_H_BASE_SERVICE_GET_ALL_REGION_LOCATIONS_RESULT, THBaseServiceGetAllRegionLocationsResultClass))
#define IS_T_H_BASE_SERVICE_GET_ALL_REGION_LOCATIONS_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_H_BASE_SERVICE_GET_ALL_REGION_LOCATIONS_RESULT))
#define IS_T_H_BASE_SERVICE_GET_ALL_REGION_LOCATIONS_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_H_BASE_SERVICE_GET_ALL_REGION_LOCATIONS_RESULT))
#define T_H_BASE_SERVICE_GET_ALL_REGION_LOCATIONS_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_H_BASE_SERVICE_GET_ALL_REGION_LOCATIONS_RESULT, THBaseServiceGetAllRegionLocationsResultClass))

/* struct THBaseServiceCheckAndMutateArgs */
struct _THBaseServiceCheckAndMutateArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * table;
  GByteArray * row;
  GByteArray * family;
  GByteArray * qualifier;
  TCompareOp compareOp;
  GByteArray * value;
  gboolean __isset_value;
  TRowMutations * rowMutations;
};
typedef struct _THBaseServiceCheckAndMutateArgs THBaseServiceCheckAndMutateArgs;

struct _THBaseServiceCheckAndMutateArgsClass
{
  ThriftStructClass parent;
};
typedef struct _THBaseServiceCheckAndMutateArgsClass THBaseServiceCheckAndMutateArgsClass;

GType t_h_base_service_check_and_mutate_args_get_type (void);
#define TYPE_T_H_BASE_SERVICE_CHECK_AND_MUTATE_ARGS (t_h_base_service_check_and_mutate_args_get_type())
#define T_H_BASE_SERVICE_CHECK_AND_MUTATE_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_H_BASE_SERVICE_CHECK_AND_MUTATE_ARGS, THBaseServiceCheckAndMutateArgs))
#define T_H_BASE_SERVICE_CHECK_AND_MUTATE_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_H_BASE_SERVICE_CHECK_AND_MUTATE_ARGS, THBaseServiceCheckAndMutateArgsClass))
#define IS_T_H_BASE_SERVICE_CHECK_AND_MUTATE_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_H_BASE_SERVICE_CHECK_AND_MUTATE_ARGS))
#define IS_T_H_BASE_SERVICE_CHECK_AND_MUTATE_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_H_BASE_SERVICE_CHECK_AND_MUTATE_ARGS))
#define T_H_BASE_SERVICE_CHECK_AND_MUTATE_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_H_BASE_SERVICE_CHECK_AND_MUTATE_ARGS, THBaseServiceCheckAndMutateArgsClass))

/* struct THBaseServiceCheckAndMutateResult */
struct _THBaseServiceCheckAndMutateResult
{ 
  ThriftStruct parent; 

  /* public */
  gboolean success;
  gboolean __isset_success;
  TIOError * io;
  gboolean __isset_io;
};
typedef struct _THBaseServiceCheckAndMutateResult THBaseServiceCheckAndMutateResult;

struct _THBaseServiceCheckAndMutateResultClass
{
  ThriftStructClass parent;
};
typedef struct _THBaseServiceCheckAndMutateResultClass THBaseServiceCheckAndMutateResultClass;

GType t_h_base_service_check_and_mutate_result_get_type (void);
#define TYPE_T_H_BASE_SERVICE_CHECK_AND_MUTATE_RESULT (t_h_base_service_check_and_mutate_result_get_type())
#define T_H_BASE_SERVICE_CHECK_AND_MUTATE_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_H_BASE_SERVICE_CHECK_AND_MUTATE_RESULT, THBaseServiceCheckAndMutateResult))
#define T_H_BASE_SERVICE_CHECK_AND_MUTATE_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_T_H_BASE_SERVICE_CHECK_AND_MUTATE_RESULT, THBaseServiceCheckAndMutateResultClass))
#define IS_T_H_BASE_SERVICE_CHECK_AND_MUTATE_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_H_BASE_SERVICE_CHECK_AND_MUTATE_RESULT))
#define IS_T_H_BASE_SERVICE_CHECK_AND_MUTATE_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_H_BASE_SERVICE_CHECK_AND_MUTATE_RESULT))
#define T_H_BASE_SERVICE_CHECK_AND_MUTATE_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_H_BASE_SERVICE_CHECK_AND_MUTATE_RESULT, THBaseServiceCheckAndMutateResultClass))

#endif /* HBASE_TYPES_H */
