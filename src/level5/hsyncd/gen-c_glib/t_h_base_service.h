/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef T_H_BASE_SERVICE_H
#define T_H_BASE_SERVICE_H

#include <thrift/c_glib/processor/thrift_dispatch_processor.h>

#include "hbase_types.h"

/* THBaseService service interface */
typedef struct _THBaseServiceIf THBaseServiceIf;  /* dummy object */

struct _THBaseServiceIfInterface
{
  GTypeInterface parent;

  gboolean (*exists) (THBaseServiceIf *iface, gboolean* _return, const GByteArray * table, const TGet * tget, TIOError ** io, GError **error);
  gboolean (*exists_all) (THBaseServiceIf *iface, GArray ** _return, const GByteArray * table, const GPtrArray * tgets, TIOError ** io, GError **error);
  gboolean (*get) (THBaseServiceIf *iface, TResult ** _return, const GByteArray * table, const TGet * tget, TIOError ** io, GError **error);
  gboolean (*get_multiple) (THBaseServiceIf *iface, GPtrArray ** _return, const GByteArray * table, const GPtrArray * tgets, TIOError ** io, GError **error);
  gboolean (*put) (THBaseServiceIf *iface, const GByteArray * table, const TPut * tput, TIOError ** io, GError **error);
  gboolean (*check_and_put) (THBaseServiceIf *iface, gboolean* _return, const GByteArray * table, const GByteArray * row, const GByteArray * family, const GByteArray * qualifier, const GByteArray * value, const TPut * tput, TIOError ** io, GError **error);
  gboolean (*put_multiple) (THBaseServiceIf *iface, const GByteArray * table, const GPtrArray * tputs, TIOError ** io, GError **error);
  gboolean (*delete_single) (THBaseServiceIf *iface, const GByteArray * table, const TDelete * tdelete, TIOError ** io, GError **error);
  gboolean (*delete_multiple) (THBaseServiceIf *iface, GPtrArray ** _return, const GByteArray * table, const GPtrArray * tdeletes, TIOError ** io, GError **error);
  gboolean (*check_and_delete) (THBaseServiceIf *iface, gboolean* _return, const GByteArray * table, const GByteArray * row, const GByteArray * family, const GByteArray * qualifier, const GByteArray * value, const TDelete * tdelete, TIOError ** io, GError **error);
  gboolean (*increment) (THBaseServiceIf *iface, TResult ** _return, const GByteArray * table, const TIncrement * tincrement, TIOError ** io, GError **error);
  gboolean (*append) (THBaseServiceIf *iface, TResult ** _return, const GByteArray * table, const TAppend * tappend, TIOError ** io, GError **error);
  gboolean (*open_scanner) (THBaseServiceIf *iface, gint32* _return, const GByteArray * table, const TScan * tscan, TIOError ** io, GError **error);
  gboolean (*get_scanner_rows) (THBaseServiceIf *iface, GPtrArray ** _return, const gint32 scannerId, const gint32 numRows, TIOError ** io, TIllegalArgument ** ia, GError **error);
  gboolean (*close_scanner) (THBaseServiceIf *iface, const gint32 scannerId, TIOError ** io, TIllegalArgument ** ia, GError **error);
  gboolean (*mutate_row) (THBaseServiceIf *iface, const GByteArray * table, const TRowMutations * trowMutations, TIOError ** io, GError **error);
  gboolean (*get_scanner_results) (THBaseServiceIf *iface, GPtrArray ** _return, const GByteArray * table, const TScan * tscan, const gint32 numRows, TIOError ** io, GError **error);
  gboolean (*get_region_location) (THBaseServiceIf *iface, THRegionLocation ** _return, const GByteArray * table, const GByteArray * row, const gboolean reload, TIOError ** io, GError **error);
  gboolean (*get_all_region_locations) (THBaseServiceIf *iface, GPtrArray ** _return, const GByteArray * table, TIOError ** io, GError **error);
  gboolean (*check_and_mutate) (THBaseServiceIf *iface, gboolean* _return, const GByteArray * table, const GByteArray * row, const GByteArray * family, const GByteArray * qualifier, const TCompareOp compareOp, const GByteArray * value, const TRowMutations * rowMutations, TIOError ** io, GError **error);
};
typedef struct _THBaseServiceIfInterface THBaseServiceIfInterface;

GType t_h_base_service_if_get_type (void);
#define TYPE_T_H_BASE_SERVICE_IF (t_h_base_service_if_get_type())
#define T_H_BASE_SERVICE_IF(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_H_BASE_SERVICE_IF, THBaseServiceIf))
#define IS_T_H_BASE_SERVICE_IF(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_H_BASE_SERVICE_IF))
#define T_H_BASE_SERVICE_IF_GET_INTERFACE(inst) (G_TYPE_INSTANCE_GET_INTERFACE ((inst), TYPE_T_H_BASE_SERVICE_IF, THBaseServiceIfInterface))

gboolean t_h_base_service_if_exists (THBaseServiceIf *iface, gboolean* _return, const GByteArray * table, const TGet * tget, TIOError ** io, GError **error);
gboolean t_h_base_service_if_exists_all (THBaseServiceIf *iface, GArray ** _return, const GByteArray * table, const GPtrArray * tgets, TIOError ** io, GError **error);
gboolean t_h_base_service_if_get (THBaseServiceIf *iface, TResult ** _return, const GByteArray * table, const TGet * tget, TIOError ** io, GError **error);
gboolean t_h_base_service_if_get_multiple (THBaseServiceIf *iface, GPtrArray ** _return, const GByteArray * table, const GPtrArray * tgets, TIOError ** io, GError **error);
gboolean t_h_base_service_if_put (THBaseServiceIf *iface, const GByteArray * table, const TPut * tput, TIOError ** io, GError **error);
gboolean t_h_base_service_if_check_and_put (THBaseServiceIf *iface, gboolean* _return, const GByteArray * table, const GByteArray * row, const GByteArray * family, const GByteArray * qualifier, const GByteArray * value, const TPut * tput, TIOError ** io, GError **error);
gboolean t_h_base_service_if_put_multiple (THBaseServiceIf *iface, const GByteArray * table, const GPtrArray * tputs, TIOError ** io, GError **error);
gboolean t_h_base_service_if_delete_single (THBaseServiceIf *iface, const GByteArray * table, const TDelete * tdelete, TIOError ** io, GError **error);
gboolean t_h_base_service_if_delete_multiple (THBaseServiceIf *iface, GPtrArray ** _return, const GByteArray * table, const GPtrArray * tdeletes, TIOError ** io, GError **error);
gboolean t_h_base_service_if_check_and_delete (THBaseServiceIf *iface, gboolean* _return, const GByteArray * table, const GByteArray * row, const GByteArray * family, const GByteArray * qualifier, const GByteArray * value, const TDelete * tdelete, TIOError ** io, GError **error);
gboolean t_h_base_service_if_increment (THBaseServiceIf *iface, TResult ** _return, const GByteArray * table, const TIncrement * tincrement, TIOError ** io, GError **error);
gboolean t_h_base_service_if_append (THBaseServiceIf *iface, TResult ** _return, const GByteArray * table, const TAppend * tappend, TIOError ** io, GError **error);
gboolean t_h_base_service_if_open_scanner (THBaseServiceIf *iface, gint32* _return, const GByteArray * table, const TScan * tscan, TIOError ** io, GError **error);
gboolean t_h_base_service_if_get_scanner_rows (THBaseServiceIf *iface, GPtrArray ** _return, const gint32 scannerId, const gint32 numRows, TIOError ** io, TIllegalArgument ** ia, GError **error);
gboolean t_h_base_service_if_close_scanner (THBaseServiceIf *iface, const gint32 scannerId, TIOError ** io, TIllegalArgument ** ia, GError **error);
gboolean t_h_base_service_if_mutate_row (THBaseServiceIf *iface, const GByteArray * table, const TRowMutations * trowMutations, TIOError ** io, GError **error);
gboolean t_h_base_service_if_get_scanner_results (THBaseServiceIf *iface, GPtrArray ** _return, const GByteArray * table, const TScan * tscan, const gint32 numRows, TIOError ** io, GError **error);
gboolean t_h_base_service_if_get_region_location (THBaseServiceIf *iface, THRegionLocation ** _return, const GByteArray * table, const GByteArray * row, const gboolean reload, TIOError ** io, GError **error);
gboolean t_h_base_service_if_get_all_region_locations (THBaseServiceIf *iface, GPtrArray ** _return, const GByteArray * table, TIOError ** io, GError **error);
gboolean t_h_base_service_if_check_and_mutate (THBaseServiceIf *iface, gboolean* _return, const GByteArray * table, const GByteArray * row, const GByteArray * family, const GByteArray * qualifier, const TCompareOp compareOp, const GByteArray * value, const TRowMutations * rowMutations, TIOError ** io, GError **error);

/* THBaseService service client */
struct _THBaseServiceClient
{
  GObject parent;

  ThriftProtocol *input_protocol;
  ThriftProtocol *output_protocol;
};
typedef struct _THBaseServiceClient THBaseServiceClient;

struct _THBaseServiceClientClass
{
  GObjectClass parent;
};
typedef struct _THBaseServiceClientClass THBaseServiceClientClass;

GType t_h_base_service_client_get_type (void);
#define TYPE_T_H_BASE_SERVICE_CLIENT (t_h_base_service_client_get_type())
#define T_H_BASE_SERVICE_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_H_BASE_SERVICE_CLIENT, THBaseServiceClient))
#define T_H_BASE_SERVICE_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_T_H_BASE_SERVICE_CLIENT, THBaseServiceClientClass))
#define T_H_BASE_SERVICE_IS_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_H_BASE_SERVICE_CLIENT))
#define T_H_BASE_SERVICE_IS_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_H_BASE_SERVICE_CLIENT))
#define T_H_BASE_SERVICE_CLIENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_H_BASE_SERVICE_CLIENT, THBaseServiceClientClass))

gboolean t_h_base_service_client_exists (THBaseServiceIf * iface, gboolean* _return, const GByteArray * table, const TGet * tget, TIOError ** io, GError ** error);
gboolean t_h_base_service_client_send_exists (THBaseServiceIf * iface, const GByteArray * table, const TGet * tget, GError ** error);
gboolean t_h_base_service_client_recv_exists (THBaseServiceIf * iface, gboolean* _return, TIOError ** io, GError ** error);
gboolean t_h_base_service_client_exists_all (THBaseServiceIf * iface, GArray ** _return, const GByteArray * table, const GPtrArray * tgets, TIOError ** io, GError ** error);
gboolean t_h_base_service_client_send_exists_all (THBaseServiceIf * iface, const GByteArray * table, const GPtrArray * tgets, GError ** error);
gboolean t_h_base_service_client_recv_exists_all (THBaseServiceIf * iface, GArray ** _return, TIOError ** io, GError ** error);
gboolean t_h_base_service_client_get (THBaseServiceIf * iface, TResult ** _return, const GByteArray * table, const TGet * tget, TIOError ** io, GError ** error);
gboolean t_h_base_service_client_send_get (THBaseServiceIf * iface, const GByteArray * table, const TGet * tget, GError ** error);
gboolean t_h_base_service_client_recv_get (THBaseServiceIf * iface, TResult ** _return, TIOError ** io, GError ** error);
gboolean t_h_base_service_client_get_multiple (THBaseServiceIf * iface, GPtrArray ** _return, const GByteArray * table, const GPtrArray * tgets, TIOError ** io, GError ** error);
gboolean t_h_base_service_client_send_get_multiple (THBaseServiceIf * iface, const GByteArray * table, const GPtrArray * tgets, GError ** error);
gboolean t_h_base_service_client_recv_get_multiple (THBaseServiceIf * iface, GPtrArray ** _return, TIOError ** io, GError ** error);
gboolean t_h_base_service_client_put (THBaseServiceIf * iface, const GByteArray * table, const TPut * tput, TIOError ** io, GError ** error);
gboolean t_h_base_service_client_send_put (THBaseServiceIf * iface, const GByteArray * table, const TPut * tput, GError ** error);
gboolean t_h_base_service_client_recv_put (THBaseServiceIf * iface, TIOError ** io, GError ** error);
gboolean t_h_base_service_client_check_and_put (THBaseServiceIf * iface, gboolean* _return, const GByteArray * table, const GByteArray * row, const GByteArray * family, const GByteArray * qualifier, const GByteArray * value, const TPut * tput, TIOError ** io, GError ** error);
gboolean t_h_base_service_client_send_check_and_put (THBaseServiceIf * iface, const GByteArray * table, const GByteArray * row, const GByteArray * family, const GByteArray * qualifier, const GByteArray * value, const TPut * tput, GError ** error);
gboolean t_h_base_service_client_recv_check_and_put (THBaseServiceIf * iface, gboolean* _return, TIOError ** io, GError ** error);
gboolean t_h_base_service_client_put_multiple (THBaseServiceIf * iface, const GByteArray * table, const GPtrArray * tputs, TIOError ** io, GError ** error);
gboolean t_h_base_service_client_send_put_multiple (THBaseServiceIf * iface, const GByteArray * table, const GPtrArray * tputs, GError ** error);
gboolean t_h_base_service_client_recv_put_multiple (THBaseServiceIf * iface, TIOError ** io, GError ** error);
gboolean t_h_base_service_client_delete_single (THBaseServiceIf * iface, const GByteArray * table, const TDelete * tdelete, TIOError ** io, GError ** error);
gboolean t_h_base_service_client_send_delete_single (THBaseServiceIf * iface, const GByteArray * table, const TDelete * tdelete, GError ** error);
gboolean t_h_base_service_client_recv_delete_single (THBaseServiceIf * iface, TIOError ** io, GError ** error);
gboolean t_h_base_service_client_delete_multiple (THBaseServiceIf * iface, GPtrArray ** _return, const GByteArray * table, const GPtrArray * tdeletes, TIOError ** io, GError ** error);
gboolean t_h_base_service_client_send_delete_multiple (THBaseServiceIf * iface, const GByteArray * table, const GPtrArray * tdeletes, GError ** error);
gboolean t_h_base_service_client_recv_delete_multiple (THBaseServiceIf * iface, GPtrArray ** _return, TIOError ** io, GError ** error);
gboolean t_h_base_service_client_check_and_delete (THBaseServiceIf * iface, gboolean* _return, const GByteArray * table, const GByteArray * row, const GByteArray * family, const GByteArray * qualifier, const GByteArray * value, const TDelete * tdelete, TIOError ** io, GError ** error);
gboolean t_h_base_service_client_send_check_and_delete (THBaseServiceIf * iface, const GByteArray * table, const GByteArray * row, const GByteArray * family, const GByteArray * qualifier, const GByteArray * value, const TDelete * tdelete, GError ** error);
gboolean t_h_base_service_client_recv_check_and_delete (THBaseServiceIf * iface, gboolean* _return, TIOError ** io, GError ** error);
gboolean t_h_base_service_client_increment (THBaseServiceIf * iface, TResult ** _return, const GByteArray * table, const TIncrement * tincrement, TIOError ** io, GError ** error);
gboolean t_h_base_service_client_send_increment (THBaseServiceIf * iface, const GByteArray * table, const TIncrement * tincrement, GError ** error);
gboolean t_h_base_service_client_recv_increment (THBaseServiceIf * iface, TResult ** _return, TIOError ** io, GError ** error);
gboolean t_h_base_service_client_append (THBaseServiceIf * iface, TResult ** _return, const GByteArray * table, const TAppend * tappend, TIOError ** io, GError ** error);
gboolean t_h_base_service_client_send_append (THBaseServiceIf * iface, const GByteArray * table, const TAppend * tappend, GError ** error);
gboolean t_h_base_service_client_recv_append (THBaseServiceIf * iface, TResult ** _return, TIOError ** io, GError ** error);
gboolean t_h_base_service_client_open_scanner (THBaseServiceIf * iface, gint32* _return, const GByteArray * table, const TScan * tscan, TIOError ** io, GError ** error);
gboolean t_h_base_service_client_send_open_scanner (THBaseServiceIf * iface, const GByteArray * table, const TScan * tscan, GError ** error);
gboolean t_h_base_service_client_recv_open_scanner (THBaseServiceIf * iface, gint32* _return, TIOError ** io, GError ** error);
gboolean t_h_base_service_client_get_scanner_rows (THBaseServiceIf * iface, GPtrArray ** _return, const gint32 scannerId, const gint32 numRows, TIOError ** io, TIllegalArgument ** ia, GError ** error);
gboolean t_h_base_service_client_send_get_scanner_rows (THBaseServiceIf * iface, const gint32 scannerId, const gint32 numRows, GError ** error);
gboolean t_h_base_service_client_recv_get_scanner_rows (THBaseServiceIf * iface, GPtrArray ** _return, TIOError ** io, TIllegalArgument ** ia, GError ** error);
gboolean t_h_base_service_client_close_scanner (THBaseServiceIf * iface, const gint32 scannerId, TIOError ** io, TIllegalArgument ** ia, GError ** error);
gboolean t_h_base_service_client_send_close_scanner (THBaseServiceIf * iface, const gint32 scannerId, GError ** error);
gboolean t_h_base_service_client_recv_close_scanner (THBaseServiceIf * iface, TIOError ** io, TIllegalArgument ** ia, GError ** error);
gboolean t_h_base_service_client_mutate_row (THBaseServiceIf * iface, const GByteArray * table, const TRowMutations * trowMutations, TIOError ** io, GError ** error);
gboolean t_h_base_service_client_send_mutate_row (THBaseServiceIf * iface, const GByteArray * table, const TRowMutations * trowMutations, GError ** error);
gboolean t_h_base_service_client_recv_mutate_row (THBaseServiceIf * iface, TIOError ** io, GError ** error);
gboolean t_h_base_service_client_get_scanner_results (THBaseServiceIf * iface, GPtrArray ** _return, const GByteArray * table, const TScan * tscan, const gint32 numRows, TIOError ** io, GError ** error);
gboolean t_h_base_service_client_send_get_scanner_results (THBaseServiceIf * iface, const GByteArray * table, const TScan * tscan, const gint32 numRows, GError ** error);
gboolean t_h_base_service_client_recv_get_scanner_results (THBaseServiceIf * iface, GPtrArray ** _return, TIOError ** io, GError ** error);
gboolean t_h_base_service_client_get_region_location (THBaseServiceIf * iface, THRegionLocation ** _return, const GByteArray * table, const GByteArray * row, const gboolean reload, TIOError ** io, GError ** error);
gboolean t_h_base_service_client_send_get_region_location (THBaseServiceIf * iface, const GByteArray * table, const GByteArray * row, const gboolean reload, GError ** error);
gboolean t_h_base_service_client_recv_get_region_location (THBaseServiceIf * iface, THRegionLocation ** _return, TIOError ** io, GError ** error);
gboolean t_h_base_service_client_get_all_region_locations (THBaseServiceIf * iface, GPtrArray ** _return, const GByteArray * table, TIOError ** io, GError ** error);
gboolean t_h_base_service_client_send_get_all_region_locations (THBaseServiceIf * iface, const GByteArray * table, GError ** error);
gboolean t_h_base_service_client_recv_get_all_region_locations (THBaseServiceIf * iface, GPtrArray ** _return, TIOError ** io, GError ** error);
gboolean t_h_base_service_client_check_and_mutate (THBaseServiceIf * iface, gboolean* _return, const GByteArray * table, const GByteArray * row, const GByteArray * family, const GByteArray * qualifier, const TCompareOp compareOp, const GByteArray * value, const TRowMutations * rowMutations, TIOError ** io, GError ** error);
gboolean t_h_base_service_client_send_check_and_mutate (THBaseServiceIf * iface, const GByteArray * table, const GByteArray * row, const GByteArray * family, const GByteArray * qualifier, const TCompareOp compareOp, const GByteArray * value, const TRowMutations * rowMutations, GError ** error);
gboolean t_h_base_service_client_recv_check_and_mutate (THBaseServiceIf * iface, gboolean* _return, TIOError ** io, GError ** error);
void t_h_base_service_client_set_property (GObject *object, guint property_id, const GValue *value, GParamSpec *pspec);
void t_h_base_service_client_get_property (GObject *object, guint property_id, GValue *value, GParamSpec *pspec);

/* THBaseService handler (abstract base class) */
struct _THBaseServiceHandler
{
  GObject parent;
};
typedef struct _THBaseServiceHandler THBaseServiceHandler;

struct _THBaseServiceHandlerClass
{
  GObjectClass parent;

  gboolean (*exists) (THBaseServiceIf *iface, gboolean* _return, const GByteArray * table, const TGet * tget, TIOError ** io, GError **error);
  gboolean (*exists_all) (THBaseServiceIf *iface, GArray ** _return, const GByteArray * table, const GPtrArray * tgets, TIOError ** io, GError **error);
  gboolean (*get) (THBaseServiceIf *iface, TResult ** _return, const GByteArray * table, const TGet * tget, TIOError ** io, GError **error);
  gboolean (*get_multiple) (THBaseServiceIf *iface, GPtrArray ** _return, const GByteArray * table, const GPtrArray * tgets, TIOError ** io, GError **error);
  gboolean (*put) (THBaseServiceIf *iface, const GByteArray * table, const TPut * tput, TIOError ** io, GError **error);
  gboolean (*check_and_put) (THBaseServiceIf *iface, gboolean* _return, const GByteArray * table, const GByteArray * row, const GByteArray * family, const GByteArray * qualifier, const GByteArray * value, const TPut * tput, TIOError ** io, GError **error);
  gboolean (*put_multiple) (THBaseServiceIf *iface, const GByteArray * table, const GPtrArray * tputs, TIOError ** io, GError **error);
  gboolean (*delete_single) (THBaseServiceIf *iface, const GByteArray * table, const TDelete * tdelete, TIOError ** io, GError **error);
  gboolean (*delete_multiple) (THBaseServiceIf *iface, GPtrArray ** _return, const GByteArray * table, const GPtrArray * tdeletes, TIOError ** io, GError **error);
  gboolean (*check_and_delete) (THBaseServiceIf *iface, gboolean* _return, const GByteArray * table, const GByteArray * row, const GByteArray * family, const GByteArray * qualifier, const GByteArray * value, const TDelete * tdelete, TIOError ** io, GError **error);
  gboolean (*increment) (THBaseServiceIf *iface, TResult ** _return, const GByteArray * table, const TIncrement * tincrement, TIOError ** io, GError **error);
  gboolean (*append) (THBaseServiceIf *iface, TResult ** _return, const GByteArray * table, const TAppend * tappend, TIOError ** io, GError **error);
  gboolean (*open_scanner) (THBaseServiceIf *iface, gint32* _return, const GByteArray * table, const TScan * tscan, TIOError ** io, GError **error);
  gboolean (*get_scanner_rows) (THBaseServiceIf *iface, GPtrArray ** _return, const gint32 scannerId, const gint32 numRows, TIOError ** io, TIllegalArgument ** ia, GError **error);
  gboolean (*close_scanner) (THBaseServiceIf *iface, const gint32 scannerId, TIOError ** io, TIllegalArgument ** ia, GError **error);
  gboolean (*mutate_row) (THBaseServiceIf *iface, const GByteArray * table, const TRowMutations * trowMutations, TIOError ** io, GError **error);
  gboolean (*get_scanner_results) (THBaseServiceIf *iface, GPtrArray ** _return, const GByteArray * table, const TScan * tscan, const gint32 numRows, TIOError ** io, GError **error);
  gboolean (*get_region_location) (THBaseServiceIf *iface, THRegionLocation ** _return, const GByteArray * table, const GByteArray * row, const gboolean reload, TIOError ** io, GError **error);
  gboolean (*get_all_region_locations) (THBaseServiceIf *iface, GPtrArray ** _return, const GByteArray * table, TIOError ** io, GError **error);
  gboolean (*check_and_mutate) (THBaseServiceIf *iface, gboolean* _return, const GByteArray * table, const GByteArray * row, const GByteArray * family, const GByteArray * qualifier, const TCompareOp compareOp, const GByteArray * value, const TRowMutations * rowMutations, TIOError ** io, GError **error);
};
typedef struct _THBaseServiceHandlerClass THBaseServiceHandlerClass;

GType t_h_base_service_handler_get_type (void);
#define TYPE_T_H_BASE_SERVICE_HANDLER (t_h_base_service_handler_get_type())
#define T_H_BASE_SERVICE_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_H_BASE_SERVICE_HANDLER, THBaseServiceHandler))
#define IS_T_H_BASE_SERVICE_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_H_BASE_SERVICE_HANDLER))
#define T_H_BASE_SERVICE_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_T_H_BASE_SERVICE_HANDLER, THBaseServiceHandlerClass))
#define IS_T_H_BASE_SERVICE_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_H_BASE_SERVICE_HANDLER))
#define T_H_BASE_SERVICE_HANDLER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_H_BASE_SERVICE_HANDLER, THBaseServiceHandlerClass))

gboolean t_h_base_service_handler_exists (THBaseServiceIf *iface, gboolean* _return, const GByteArray * table, const TGet * tget, TIOError ** io, GError **error);
gboolean t_h_base_service_handler_exists_all (THBaseServiceIf *iface, GArray ** _return, const GByteArray * table, const GPtrArray * tgets, TIOError ** io, GError **error);
gboolean t_h_base_service_handler_get (THBaseServiceIf *iface, TResult ** _return, const GByteArray * table, const TGet * tget, TIOError ** io, GError **error);
gboolean t_h_base_service_handler_get_multiple (THBaseServiceIf *iface, GPtrArray ** _return, const GByteArray * table, const GPtrArray * tgets, TIOError ** io, GError **error);
gboolean t_h_base_service_handler_put (THBaseServiceIf *iface, const GByteArray * table, const TPut * tput, TIOError ** io, GError **error);
gboolean t_h_base_service_handler_check_and_put (THBaseServiceIf *iface, gboolean* _return, const GByteArray * table, const GByteArray * row, const GByteArray * family, const GByteArray * qualifier, const GByteArray * value, const TPut * tput, TIOError ** io, GError **error);
gboolean t_h_base_service_handler_put_multiple (THBaseServiceIf *iface, const GByteArray * table, const GPtrArray * tputs, TIOError ** io, GError **error);
gboolean t_h_base_service_handler_delete_single (THBaseServiceIf *iface, const GByteArray * table, const TDelete * tdelete, TIOError ** io, GError **error);
gboolean t_h_base_service_handler_delete_multiple (THBaseServiceIf *iface, GPtrArray ** _return, const GByteArray * table, const GPtrArray * tdeletes, TIOError ** io, GError **error);
gboolean t_h_base_service_handler_check_and_delete (THBaseServiceIf *iface, gboolean* _return, const GByteArray * table, const GByteArray * row, const GByteArray * family, const GByteArray * qualifier, const GByteArray * value, const TDelete * tdelete, TIOError ** io, GError **error);
gboolean t_h_base_service_handler_increment (THBaseServiceIf *iface, TResult ** _return, const GByteArray * table, const TIncrement * tincrement, TIOError ** io, GError **error);
gboolean t_h_base_service_handler_append (THBaseServiceIf *iface, TResult ** _return, const GByteArray * table, const TAppend * tappend, TIOError ** io, GError **error);
gboolean t_h_base_service_handler_open_scanner (THBaseServiceIf *iface, gint32* _return, const GByteArray * table, const TScan * tscan, TIOError ** io, GError **error);
gboolean t_h_base_service_handler_get_scanner_rows (THBaseServiceIf *iface, GPtrArray ** _return, const gint32 scannerId, const gint32 numRows, TIOError ** io, TIllegalArgument ** ia, GError **error);
gboolean t_h_base_service_handler_close_scanner (THBaseServiceIf *iface, const gint32 scannerId, TIOError ** io, TIllegalArgument ** ia, GError **error);
gboolean t_h_base_service_handler_mutate_row (THBaseServiceIf *iface, const GByteArray * table, const TRowMutations * trowMutations, TIOError ** io, GError **error);
gboolean t_h_base_service_handler_get_scanner_results (THBaseServiceIf *iface, GPtrArray ** _return, const GByteArray * table, const TScan * tscan, const gint32 numRows, TIOError ** io, GError **error);
gboolean t_h_base_service_handler_get_region_location (THBaseServiceIf *iface, THRegionLocation ** _return, const GByteArray * table, const GByteArray * row, const gboolean reload, TIOError ** io, GError **error);
gboolean t_h_base_service_handler_get_all_region_locations (THBaseServiceIf *iface, GPtrArray ** _return, const GByteArray * table, TIOError ** io, GError **error);
gboolean t_h_base_service_handler_check_and_mutate (THBaseServiceIf *iface, gboolean* _return, const GByteArray * table, const GByteArray * row, const GByteArray * family, const GByteArray * qualifier, const TCompareOp compareOp, const GByteArray * value, const TRowMutations * rowMutations, TIOError ** io, GError **error);

/* THBaseService processor */
struct _THBaseServiceProcessor
{
  ThriftDispatchProcessor parent;

  /* protected */
  THBaseServiceHandler *handler;
  GHashTable *process_map;
};
typedef struct _THBaseServiceProcessor THBaseServiceProcessor;

struct _THBaseServiceProcessorClass
{
  ThriftDispatchProcessorClass parent;

  /* protected */
  gboolean (*dispatch_call) (ThriftDispatchProcessor *processor,
                             ThriftProtocol *in,
                             ThriftProtocol *out,
                             gchar *fname,
                             gint32 seqid,
                             GError **error);
};
typedef struct _THBaseServiceProcessorClass THBaseServiceProcessorClass;

GType t_h_base_service_processor_get_type (void);
#define TYPE_T_H_BASE_SERVICE_PROCESSOR (t_h_base_service_processor_get_type())
#define T_H_BASE_SERVICE_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_T_H_BASE_SERVICE_PROCESSOR, THBaseServiceProcessor))
#define IS_T_H_BASE_SERVICE_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_T_H_BASE_SERVICE_PROCESSOR))
#define T_H_BASE_SERVICE_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_T_H_BASE_SERVICE_PROCESSOR, THBaseServiceProcessorClass))
#define IS_T_H_BASE_SERVICE_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_T_H_BASE_SERVICE_PROCESSOR))
#define T_H_BASE_SERVICE_PROCESSOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_T_H_BASE_SERVICE_PROCESSOR, THBaseServiceProcessorClass))

#endif /* T_H_BASE_SERVICE_H */
